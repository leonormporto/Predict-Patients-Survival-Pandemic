{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1><center> The Boolean pandemic </center></h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "\n",
    "\n",
    "* [1. Dataset description](#description)\n",
    "* [2. The needed steps](#needs)\n",
    "    * [2.1. Import Libraries](#import)\n",
    "    * [2.2. Import datasets](#import2)\n",
    "* [3. Data Understanding](#understand) \n",
    "    * [3.1. Check datasets](#datasets)\n",
    "* [4. Data Preparation](#preparation) \n",
    "    * [4.1. Data Cleaning](#cleaning)\n",
    "    * [4.2. Feature Engineering](#feature)\n",
    "    * [4.3. Outliers](#outliers)\n",
    "    * [4.4. Data Distribution](#distribution) \n",
    "* [5. Further Analysis](#further) \n",
    "* [6. Feature Selection](#feature) \n",
    "* [7. Models](#model) \n",
    "    * [7.1. MLPClassifier](#model_1)\n",
    "    * [7.2. ExtraTreesClassifier](#model_2)\n",
    "    * [7.3. Bagging Classifier with ExtraTreesClassifier](#model_3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<hr>\n",
    "<a id=\"description\">\n",
    "    \n",
    "# 1. Dataset description\n",
    "    \n",
    "</a>\n",
    "<br>\n",
    "\n",
    "\n",
    "- **Patient_ID:** The unique identifier of the patient;\n",
    "- **Family_Case_ID:** The family identification;\n",
    "- **Severity:** The severity of the disease, where 1 is the lowest and 3 the highest severity;\n",
    "- **Name:** The name of the patient;\n",
    "- **Birthday_year:** The year of birthday of the patient;\n",
    "- **Parents_Siblings_Infected:** The number of parents and/or siblings infected;\n",
    "- **Partner_Children_Infected:** The number of partner and/or children infected;\n",
    "- **Medical_Expenses_Family:** The medical expenses associated to try to contain the epidemy on the family;\n",
    "- **Medical_Tent:** The medical tent where the patient is / was lodged;\n",
    "- **City:** The original city of the patient;\n",
    "- **Deceased:** Flag if the patient deceased or not with the virus (0 = No, 1 = Yes)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "<a id=\"needs\">\n",
    "    \n",
    "# 2. The needed steps\n",
    "    \n",
    "</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a  id=\"import\">\n",
    "\n",
    "## 2.1. Import Libraries\n",
    "\n",
    "</a>\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "import datetime\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "import requests, zipfile, io\n",
    "from datetime import datetime\n",
    "from collections import Counter\n",
    "import matplotlib.pyplot as plt\n",
    "warnings.filterwarnings('ignore')\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.metrics import accuracy_score\n",
    "from scipy.stats import norm\n",
    "from sklearn.svm import SVC, LinearSVC, NuSVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.experimental import enable_hist_gradient_boosting\n",
    "from sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB\n",
    "from sklearn.linear_model import LogisticRegression, SGDClassifier\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler, RobustScaler, MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV, cross_val_score\n",
    "from sklearn.ensemble import BaggingClassifier, GradientBoostingClassifier, RandomForestClassifier, ExtraTreesClassifier, AdaBoostClassifier, VotingClassifier, HistGradientBoostingClassifier "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"import2\">\n",
    "\n",
    "## 2.2. Import Dataset\n",
    "</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "r = requests.get('https://github.com//SofiaGeraldes//ML//blob//master//Data.zip?raw=true')\n",
    "\n",
    "z = zipfile.ZipFile(io.BytesIO(r.content))\n",
    "z.extractall()\n",
    "\n",
    "del z\n",
    "del r\n",
    "\n",
    "test = pd.read_csv(\"test.csv\")\n",
    "train = pd.read_csv(\"train.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "<a class=\"anchor\" id=\"understand\">\n",
    "    \n",
    "# 3. Data Understanding\n",
    "    \n",
    "</a>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a  id=\"datasets\">\n",
    "\n",
    "## 3.1. Check datasets\n",
    "\n",
    "</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note:** There was an error with the name of two variables: \n",
    "\n",
    "- \"Parents or siblings infected\" should be \"Parents or children infected\";\n",
    "- \"Wife/Husband or children infected\" should be \"Wife/Husband or siblings infected\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "train = train.rename(columns={\"Parents or siblings infected\": \"Parents or children infected\", \n",
    "                      \"Wife/Husband or children infected\": \"Wife/Husband or siblings infected\"})\n",
    "\n",
    "test = test.rename(columns={\"Parents or siblings infected\": \"Parents or children infected\", \n",
    "                      \"Wife/Husband or children infected\": \"Wife/Husband or siblings infected\"})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Train set:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Family_Case_ID</th>\n",
       "      <th>Severity</th>\n",
       "      <th>Name</th>\n",
       "      <th>Birthday_year</th>\n",
       "      <th>Parents or children infected</th>\n",
       "      <th>Wife/Husband or siblings infected</th>\n",
       "      <th>Medical_Expenses_Family</th>\n",
       "      <th>Medical_Tent</th>\n",
       "      <th>City</th>\n",
       "      <th>Deceased</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>4696</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss Linda Betty</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Santa Fe</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>21436</td>\n",
       "      <td>1</td>\n",
       "      <td>Ms. Ramona Elvira</td>\n",
       "      <td>1966.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1663</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Albuquerque</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>7273</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr. Mario Vernon</td>\n",
       "      <td>1982.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>221</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Santa Fe</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>8226</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr. Hector Joe</td>\n",
       "      <td>1997.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>220</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Santa Fe</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>19689</td>\n",
       "      <td>3</td>\n",
       "      <td>Ms. Jennie Debra</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>222</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Santa Fe</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Patient_ID  Family_Case_ID  Severity               Name  Birthday_year  \\\n",
       "0           1            4696         3   Miss Linda Betty            NaN   \n",
       "1           2           21436         1  Ms. Ramona Elvira         1966.0   \n",
       "2           3            7273         3   Mr. Mario Vernon         1982.0   \n",
       "3           4            8226         3     Mr. Hector Joe         1997.0   \n",
       "4           5           19689         3   Ms. Jennie Debra         1994.0   \n",
       "\n",
       "   Parents or children infected  Wife/Husband or siblings infected  \\\n",
       "0                             0                                  0   \n",
       "1                             0                                  1   \n",
       "2                             0                                  0   \n",
       "3                             0                                  0   \n",
       "4                             0                                  0   \n",
       "\n",
       "   Medical_Expenses_Family Medical_Tent         City  Deceased  \n",
       "0                      225          NaN     Santa Fe         1  \n",
       "1                     1663          NaN  Albuquerque         0  \n",
       "2                      221          NaN     Santa Fe         1  \n",
       "3                      220          NaN     Santa Fe         1  \n",
       "4                      222          NaN     Santa Fe         0  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(900, 11)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 900 entries, 0 to 899\n",
      "Data columns (total 11 columns):\n",
      " #   Column                             Non-Null Count  Dtype  \n",
      "---  ------                             --------------  -----  \n",
      " 0   Patient_ID                         900 non-null    int64  \n",
      " 1   Family_Case_ID                     900 non-null    int64  \n",
      " 2   Severity                           900 non-null    int64  \n",
      " 3   Name                               900 non-null    object \n",
      " 4   Birthday_year                      723 non-null    float64\n",
      " 5   Parents or children infected       900 non-null    int64  \n",
      " 6   Wife/Husband or siblings infected  900 non-null    int64  \n",
      " 7   Medical_Expenses_Family            900 non-null    int64  \n",
      " 8   Medical_Tent                       198 non-null    object \n",
      " 9   City                               898 non-null    object \n",
      " 10  Deceased                           900 non-null    int64  \n",
      "dtypes: float64(1), int64(7), object(3)\n",
      "memory usage: 77.5+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Family_Case_ID</th>\n",
       "      <th>Severity</th>\n",
       "      <th>Birthday_year</th>\n",
       "      <th>Parents or children infected</th>\n",
       "      <th>Wife/Husband or siblings infected</th>\n",
       "      <th>Medical_Expenses_Family</th>\n",
       "      <th>Deceased</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>900.000000</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>723.000000</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>900.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>450.500000</td>\n",
       "      <td>14305.827778</td>\n",
       "      <td>2.313333</td>\n",
       "      <td>1990.266943</td>\n",
       "      <td>0.380000</td>\n",
       "      <td>0.521111</td>\n",
       "      <td>895.743333</td>\n",
       "      <td>0.614444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>259.951919</td>\n",
       "      <td>25418.153900</td>\n",
       "      <td>0.834223</td>\n",
       "      <td>14.523335</td>\n",
       "      <td>0.803247</td>\n",
       "      <td>1.098385</td>\n",
       "      <td>1385.829926</td>\n",
       "      <td>0.486997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>345.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1940.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>225.750000</td>\n",
       "      <td>8203.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1982.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>450.500000</td>\n",
       "      <td>13593.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1992.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>405.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>675.250000</td>\n",
       "      <td>18906.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1999.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>861.250000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>900.000000</td>\n",
       "      <td>742836.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2019.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>14345.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Patient_ID  Family_Case_ID    Severity  Birthday_year  \\\n",
       "count  900.000000      900.000000  900.000000     723.000000   \n",
       "mean   450.500000    14305.827778    2.313333    1990.266943   \n",
       "std    259.951919    25418.153900    0.834223      14.523335   \n",
       "min      1.000000      345.000000    1.000000    1940.000000   \n",
       "25%    225.750000     8203.000000    2.000000    1982.000000   \n",
       "50%    450.500000    13593.500000    3.000000    1992.000000   \n",
       "75%    675.250000    18906.500000    3.000000    1999.500000   \n",
       "max    900.000000   742836.000000    3.000000    2019.000000   \n",
       "\n",
       "       Parents or children infected  Wife/Husband or siblings infected  \\\n",
       "count                    900.000000                         900.000000   \n",
       "mean                       0.380000                           0.521111   \n",
       "std                        0.803247                           1.098385   \n",
       "min                        0.000000                           0.000000   \n",
       "25%                        0.000000                           0.000000   \n",
       "50%                        0.000000                           0.000000   \n",
       "75%                        0.000000                           1.000000   \n",
       "max                        6.000000                           8.000000   \n",
       "\n",
       "       Medical_Expenses_Family    Deceased  \n",
       "count               900.000000  900.000000  \n",
       "mean                895.743333    0.614444  \n",
       "std                1385.829926    0.486997  \n",
       "min                   0.000000    0.000000  \n",
       "25%                 221.000000    0.000000  \n",
       "50%                 405.000000    1.000000  \n",
       "75%                 861.250000    1.000000  \n",
       "max               14345.000000    1.000000  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- As we can see from the table above, the minimum and maximum values of the variables 'Birthday_year' and 'Medical_Expenses_Family' are very discrepant, which may require standardization."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Test set:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Family_Case_ID</th>\n",
       "      <th>Severity</th>\n",
       "      <th>Name</th>\n",
       "      <th>Birthday_year</th>\n",
       "      <th>Parents or children infected</th>\n",
       "      <th>Wife/Husband or siblings infected</th>\n",
       "      <th>Medical_Expenses_Family</th>\n",
       "      <th>Medical_Tent</th>\n",
       "      <th>City</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>901</td>\n",
       "      <td>49242</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr. Jody Pedro</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>203</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Santa Fe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>902</td>\n",
       "      <td>10400</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr. Kevin Brent</td>\n",
       "      <td>1988.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>631</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Santa Fe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>903</td>\n",
       "      <td>10795</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr. Frankie Cary</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>376</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Albuquerque</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>904</td>\n",
       "      <td>62440</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr. Rick Pete</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>405</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Albuquerque</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>905</td>\n",
       "      <td>81311</td>\n",
       "      <td>2</td>\n",
       "      <td>Mr. Matthew Erick</td>\n",
       "      <td>1996.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>378</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Santa Fe</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Patient_ID  Family_Case_ID  Severity               Name  Birthday_year  \\\n",
       "0         901           49242         3     Mr. Jody Pedro            NaN   \n",
       "1         902           10400         3    Mr. Kevin Brent         1988.0   \n",
       "2         903           10795         3   Mr. Frankie Cary         1981.0   \n",
       "3         904           62440         3      Mr. Rick Pete            NaN   \n",
       "4         905           81311         2  Mr. Matthew Erick         1996.0   \n",
       "\n",
       "   Parents or children infected  Wife/Husband or siblings infected  \\\n",
       "0                             0                                  0   \n",
       "1                             0                                  0   \n",
       "2                             1                                  0   \n",
       "3                             0                                  1   \n",
       "4                             0                                  0   \n",
       "\n",
       "   Medical_Expenses_Family Medical_Tent         City  \n",
       "0                      203          NaN     Santa Fe  \n",
       "1                      631          NaN     Santa Fe  \n",
       "2                      376          NaN  Albuquerque  \n",
       "3                      405          NaN  Albuquerque  \n",
       "4                      378          NaN     Santa Fe  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(400, 10)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 400 entries, 0 to 399\n",
      "Data columns (total 10 columns):\n",
      " #   Column                             Non-Null Count  Dtype  \n",
      "---  ------                             --------------  -----  \n",
      " 0   Patient_ID                         400 non-null    int64  \n",
      " 1   Family_Case_ID                     400 non-null    int64  \n",
      " 2   Severity                           400 non-null    int64  \n",
      " 3   Name                               400 non-null    object \n",
      " 4   Birthday_year                      318 non-null    float64\n",
      " 5   Parents or children infected       400 non-null    int64  \n",
      " 6   Wife/Husband or siblings infected  400 non-null    int64  \n",
      " 7   Medical_Expenses_Family            400 non-null    int64  \n",
      " 8   Medical_Tent                       89 non-null     object \n",
      " 9   City                               400 non-null    object \n",
      "dtypes: float64(1), int64(6), object(3)\n",
      "memory usage: 31.4+ KB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Family_Case_ID</th>\n",
       "      <th>Severity</th>\n",
       "      <th>Birthday_year</th>\n",
       "      <th>Parents or children infected</th>\n",
       "      <th>Wife/Husband or siblings infected</th>\n",
       "      <th>Medical_Expenses_Family</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>318.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1100.500000</td>\n",
       "      <td>46024.932500</td>\n",
       "      <td>2.247500</td>\n",
       "      <td>1989.707547</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.452500</td>\n",
       "      <td>1013.870000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>115.614301</td>\n",
       "      <td>39279.856807</td>\n",
       "      <td>0.844409</td>\n",
       "      <td>14.171527</td>\n",
       "      <td>0.998746</td>\n",
       "      <td>0.910944</td>\n",
       "      <td>1587.588114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>901.000000</td>\n",
       "      <td>1162.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1944.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1000.750000</td>\n",
       "      <td>13487.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1980.250000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>221.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1100.500000</td>\n",
       "      <td>26721.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1993.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>406.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1200.250000</td>\n",
       "      <td>79045.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1999.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>883.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1300.000000</td>\n",
       "      <td>128562.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2019.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>14345.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Patient_ID  Family_Case_ID    Severity  Birthday_year  \\\n",
       "count   400.000000      400.000000  400.000000     318.000000   \n",
       "mean   1100.500000    46024.932500    2.247500    1989.707547   \n",
       "std     115.614301    39279.856807    0.844409      14.171527   \n",
       "min     901.000000     1162.000000    1.000000    1944.000000   \n",
       "25%    1000.750000    13487.000000    1.000000    1980.250000   \n",
       "50%    1100.500000    26721.500000    3.000000    1993.000000   \n",
       "75%    1200.250000    79045.000000    3.000000    1999.000000   \n",
       "max    1300.000000   128562.000000    3.000000    2019.000000   \n",
       "\n",
       "       Parents or children infected  Wife/Husband or siblings infected  \\\n",
       "count                    400.000000                         400.000000   \n",
       "mean                       0.400000                           0.452500   \n",
       "std                        0.998746                           0.910944   \n",
       "min                        0.000000                           0.000000   \n",
       "25%                        0.000000                           0.000000   \n",
       "50%                        0.000000                           0.000000   \n",
       "75%                        0.000000                           1.000000   \n",
       "max                        9.000000                           8.000000   \n",
       "\n",
       "       Medical_Expenses_Family  \n",
       "count               400.000000  \n",
       "mean               1013.870000  \n",
       "std                1587.588114  \n",
       "min                   0.000000  \n",
       "25%                 221.000000  \n",
       "50%                 406.000000  \n",
       "75%                 883.250000  \n",
       "max               14345.000000  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.describe() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Again, as we can see from the table above, the minimum and maximum values of the variables 'Birthday_year' and 'Medical_Expenses_Family' are very discrepant, which may require standardization."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "<a class=\"anchor\" id=\"preparation\">\n",
    "    \n",
    "# 4. Data Preparation\n",
    "    \n",
    "</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a  id=\"cleaning\">\n",
    "\n",
    "## 4.1. Data Cleaning\n",
    "\n",
    "</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Checking missing values:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Patient_ID                             0\n",
       "Family_Case_ID                         0\n",
       "Severity                               0\n",
       "Name                                   0\n",
       "Birthday_year                        177\n",
       "Parents or children infected           0\n",
       "Wife/Husband or siblings infected      0\n",
       "Medical_Expenses_Family                0\n",
       "Medical_Tent                         702\n",
       "City                                   2\n",
       "Deceased                               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Patient_ID                             0\n",
       "Family_Case_ID                         0\n",
       "Severity                               0\n",
       "Name                                   0\n",
       "Birthday_year                         82\n",
       "Parents or children infected           0\n",
       "Wife/Husband or siblings infected      0\n",
       "Medical_Expenses_Family                0\n",
       "Medical_Tent                         311\n",
       "City                                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **Train:** Variable \"Age\" has 177 missing values, 'Medical_Tent' has 702 and 'City' only 2.\n",
    "\n",
    "- **Test:** Variable \"Age\" has 82 missing values and 'Medical_Tent' has 311."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Treat missing values:**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Age - Fill 'Age' missing values with the rounded mean, as integer type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TRAIN:\n",
    "train['Birthday_year'].fillna((train['Birthday_year'].mean()), inplace=True)\n",
    "train['Birthday_year'] = train['Birthday_year'].round(0).astype(int)\n",
    "# TEST:\n",
    "test['Birthday_year'].fillna((test['Birthday_year'].mean()), inplace=True)\n",
    "test['Birthday_year'] = test['Birthday_year'].round(0).astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Medical_Tent - Fill 'Medical_Tent' missing values with 'N' (None)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TRAIN\n",
    "train.Medical_Tent = train.Medical_Tent.fillna('N')\n",
    "# TEST\n",
    "test.Medical_Tent = test.Medical_Tent.fillna('N')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- City - Fill 'City' missing values with the index of the first occurrence of maximum over requested axis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TRAIN\n",
    "train['City']= train['City'].fillna(train['City'].value_counts().idxmax())\n",
    "# TEST\n",
    "test['City']= test['City'].fillna(test['City'].value_counts().idxmax())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a  id=\"feature\">\n",
    "\n",
    "## 4.2. Feature Engineering\n",
    "\n",
    "</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Change Birthday_year to Age**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a variable that will save the current date\n",
    "today = datetime.today()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- TRAIN:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Create a column with the Age \n",
    "train['Age'] = train['Birthday_year'].apply(lambda x: today.year - x)\n",
    "\n",
    "# Drop the Birthday_year column\n",
    "train = train.drop(columns=['Birthday_year'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- TEST:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a column with the Age \n",
    "test['Age'] = test['Birthday_year'].apply(lambda x: today.year - x)\n",
    "\n",
    "# Drop the Birthday_year column\n",
    "test = test.drop(columns=['Birthday_year'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Create a variable named Sex**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- TRAIN:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the titles from the 'Name' variable, creating another variable named 'Title'\n",
    "split = (train['Name'].str.strip().str.split(' ', n=1, expand=True).rename(columns={0:'Title', 1:'Names'}))\n",
    "\n",
    "# Join the 'Title' column to the train dataset\n",
    "train = pd.concat([train, split], axis=1)\n",
    "\n",
    "# Convert the titles to number: Miss and Ms to 1; and Mr. and Master to 0\n",
    "train['Sex'] = train['Title'].map(dict(zip(['Miss','Ms.', 'Mr.', 'Master'],[1, 1, 0, 0])))\n",
    "\n",
    "# Drop the columns 'Names', 'Title' and 'Name'\n",
    "train = train.drop(columns = ['Names', 'Title', 'Name'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- TEST:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the titles from the 'Name' variable, creating another variable named 'Title'\n",
    "split_test = (test['Name'].str.strip().str.split(' ', n=1, expand=True).rename(columns={0:'Title', 1:'Names'}))\n",
    "\n",
    "# Join the 'Title' column to the test dataset\n",
    "test = pd.concat([test, split_test], axis=1)\n",
    "\n",
    "# Convert the titles to number: Miss and Ms to 1; and Mr. and Master to 0\n",
    "test['Sex'] = test['Title'].map(dict(zip(['Miss','Mrs.', 'Mr.', 'Master'],[1, 1, 0, 0])))\n",
    "\n",
    "# Drop the columns 'Names', 'Title' and 'Name'\n",
    "test = test.drop(columns = ['Names', 'Title', 'Name'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Create a variable named Family_infected** - sum of the columns 'Parents or children infected' and 'Wife/Husband or siblings infected' for each Patient\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TRAIN\n",
    "train['Family_infected'] =  train[['Parents or children infected', 'Wife/Husband or siblings infected']].sum(axis=1)\n",
    "# TEST\n",
    "test['Family_infected'] =  test[['Parents or children infected', 'Wife/Husband or siblings infected']].sum(axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Create a variable named Total_cases** - the number of members of the family infected (maximum per Family)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TRAIN\n",
    "train['Total_cases'] = train['Family_infected'].groupby(train['Family_Case_ID']).transform('max')\n",
    "# TEST\n",
    "test['Total_cases'] = test['Family_infected'].groupby(test['Family_Case_ID']).transform('max')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Create a variable named Ind_Medical_Expenses** - by dividing the variable 'Medical_Expenses_Family' by the number of members of the family (by creating a variable named 'Ind_per_Family)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the variable 'Ind_per_Family', by counting the number of individuals per family\n",
    "# TRAIN\n",
    "train['Ind_per_Family'] = train['Patient_ID'].groupby(train['Family_Case_ID']).transform('count')\n",
    "# TEST\n",
    "test['Ind_per_Family'] = test['Patient_ID'].groupby(test['Family_Case_ID']).transform('count')\n",
    "\n",
    "# Create the variable 'Ind_Medical_Expenses'\n",
    "# TRAIN\n",
    "train['Ind_Medical_Expenses'] = round((train['Medical_Expenses_Family']/train['Ind_per_Family']),2)\n",
    "# TEST\n",
    "test['Ind_Medical_Expenses'] = round((test['Medical_Expenses_Family']/test['Ind_per_Family']),2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Drop unecessary columns**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TRAIN\n",
    "train = train.drop(columns = ['Parents or children infected', \n",
    "                              'Wife/Husband or siblings infected', \n",
    "                              'Family_infected', 'Medical_Expenses_Family', \n",
    "                              'Ind_per_Family'], axis = 1)\n",
    "\n",
    "# TEST\n",
    "test = test.drop(columns = ['Parents or children infected', \n",
    "                            'Wife/Husband or siblings infected', \n",
    "                            'Family_infected', 'Medical_Expenses_Family', \n",
    "                            'Ind_per_Family'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Transform categorical variables into ordinal variables, or by using LabelEncoder**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Check the unique values of the variable City"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Santa Fe', 'Albuquerque', 'Taos'], dtype=object)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['City'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Associate city Santa Fe to 0, Albuquerque to 1 and Taos to 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TRAIN\n",
    "train.loc[train['City'] == 'Santa Fe', 'city'] = 0\n",
    "train.loc[train['City'] == 'Albuquerque', 'city'] = 1\n",
    "train.loc[train['City'] == 'Taos', 'city'] = 2\n",
    "# TEST\n",
    "test.loc[test['City'] == 'Santa Fe', 'city'] = 0\n",
    "test.loc[test['City'] == 'Albuquerque', 'city'] = 1\n",
    "test.loc[test['City'] == 'Taos', 'city'] = 2\n",
    "\n",
    "# Convert the city variable to integer\n",
    "# TEST\n",
    "test['city'] = test['city'].astype(int)\n",
    "# TRAIN\n",
    "train['city'] = train['city'].astype(int)\n",
    "\n",
    "# Drop the City variable\n",
    "# TRAIN\n",
    "train = train.drop(columns = ['City'])\n",
    "# TEST\n",
    "test = test.drop(columns = ['City'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Enconde Medical_Tent variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "labelencoder = LabelEncoder()\n",
    "\n",
    "# TRAIN\n",
    "train['Medical_Tent'] = labelencoder.fit_transform(train['Medical_Tent'])\n",
    "# TEST\n",
    "test['Medical_Tent'] = labelencoder.fit_transform(test['Medical_Tent'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a  id=\"outliers\">\n",
    "\n",
    "## 4.3. Outliers\n",
    "\n",
    "</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define a set of numerical variables\n",
    "numeric_variables = ['Age', 'Ind_Medical_Expenses']\n",
    "\n",
    "# Plot the boxplots for the columns previously defined \n",
    "fig, ax = plt.subplots(2, 1, figsize=(10, 10))\n",
    "for var, subplot in zip(train[numeric_variables], ax.flatten()):\n",
    "    sns.boxplot(train[var], ax=subplot)  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- We attempt to delete outliers in the 'Ind_Medical_Expenses' (above 3000), but that did not end up in better model results, so we decided to keep them, after all. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a  id=\"distribution\">\n",
    "\n",
    "## 4.4. Data Distribution\n",
    "\n",
    "</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define the variables we want to see the distribution off\n",
    "variables = train[['Age', 'Ind_Medical_Expenses', 'Total_cases']]\n",
    "\n",
    "# Plot\n",
    "sns.set(style='whitegrid', palette=\"deep\", font_scale=1.1, rc={\"figure.figsize\": [8, 5]})\n",
    "variables.hist(bins=15, figsize=(15, 6), layout=(2, 2));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Histogram and normal probability plot**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(train['Age'], fit=norm);\n",
    "fig = plt.figure()\n",
    "res = stats.probplot(train['Age'], plot=plt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- We have a young sample population, since 'Age' is skewed to right. \n",
    "- This variable does not follow a normal distribution, since it presents a positive skewness and does not follow the diagonal line."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Pairplot**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x7fbb25f350d0>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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6yoKHXsREaAowRjj9SLi9bWvdyb3InLwm3/h+8OGdbuddVci7TTUi4jZJEJV1PZeRMK2U3svIsE2mO5eRLLpeJctsaYzzoSPp0n30hE8ZvRUmVQuK1X10J1yqWJULycZs0ZnnXUWHnzwQUyaNAnDhg3D0qVLcfnll2vJNQCMGjUKCxYswObNmzF69Gg888wzuPLKK9MYNVHq2Wwm7Nz59x45aRXlxx5XGGdcLPFOrgUd5pefxPyN0lkSIIoCHIXRD7nqDUtkXLLL+LqtrUvzTCeLxYRiiymybhPdxmlsC5RbbDYTbDZTl74IhMoks5xk40tVmZ6uh+6US5Vk6kJPxtwi8p3vfAcPP/wwfvGLX+Ciiy6Cx+PBAw88gB07dqCsrAxA8BaRX//613jyySdx/vnnw+v1Yt68eWmOnIiIiIioXUZ9hbjiiitwxRVXRAwbMWIE6urqtM/nnnsuNm7cmOrQiIiIiIgSkjFXsImIiIiIegMm2EREREREBmKCTURERERkICbYREREREQGYoJNRERERGQgJthERERERAZigk1EREREZCAm2EREREREBmKCTURERERkICbYREREREQGYoJNRERERGQgJthERERERAZigk1EREREZCAm2EREREREBmKCTURERERkICbYREREREQGYoJNRERERGQgJthERERERAZigk1EREREZCAm2EREREREBmKCTURERERkICbYREREREQGYoJNRERERGQgJthERERERAbKqAR7y5YtGD9+PMrLy3HjjTdiz549UdP83//9H4YPH46ysjKUlZVh9OjRaYiUiIiIiEhfxiTYhw4dwvz58/HQQw+hpqYGl1xyCWbPnh013e7du1FdXY26ujrU1dXho48+SkO0RERERET6MibBPnjwICZPnozy8nJIkoSpU6fiyy+/RFtbW8R0u3fvxhlnnJGmKImIiIiI4suYBLusrAz33HOP9nnr1q0YOHAg8vLytGGqquLLL7/Es88+i/POOw/XXXcd/v73v6cjXCIiIiIiXYKqqmq6g+ho165dmD59Oh566CFcdtll2nCn04lZs2bhpz/9KSorK7Fp0yYsXboUb731FoqKijqdr9frRX19fU+GTlmgvLwcE+a93uVyGx+7BrW1tZ3OuzvYRikV2E4pG7CdUjaI1U5NKY6jUzt27MDMmTMxZ86ciOQaABwOB9auXat9njRpEl566SV89tlnuOCCCxJexvDhw2G1WuNOU1tb2+2duzdgPURKVV101kazZbswTmNlWpy97VjKWI2XCXH2tnbak1gP7bpbFxlziwgQvC3kZz/7Ge677z5MmTIlavzXX3+NZ599NmKYz+eDxWJJVYhERERERHFlTIJ94MAB3HnnnXj00Ucxfvx43WmKiorwv//7v9iyZQsCgQDWrVsHWZZxzjnnpDhaIiIiIiJ9GZNgv/zyy2hra8O8efO0Pq7Lysrw7bffav+fcMIJeOKJJ/DYY4+hvLwcr732Gp555hlewSYiIiKijJEx92DPmTMHc+bM0R1XV1en/T1mzBiMGTMmVWEREREREXVJxlzBJiIiIiLqDZhgExEREREZiAk2EREREZGBmGATERERERmICTYRERERkYGYYBMRERERGYgJNhERERGRgQxNsCdNmoS1a9fi2LFjRs6WiIiIiChrGJpgT5s2DVu3bsXYsWNx6623YtOmTfB4PEYugoiIiIgooxmaYE+cOBHPPfcctmzZgosvvhgvv/wyxowZg+rqanz88cdGLoqIiIiIKCP1yKvS+/Xrh5EjR8LpdOLIkSPYunUr/vnPf6KtrQ0PP/wwKisre2KxRERERERpZ2iCfeDAAfzpT3/Cpk2b8M0332Ds2LH4xS9+gQsuuACSJOH3v/895s6diw8//NDIxRIRERERZQxDE+zLL78cI0eOxE033YTLL78c+fn5EePPO+88fPDBB0YukoiIiIgooxiaYK9ZswYjRoyIGv7+++9jzJgxGDRoEFasWGHkIomIiIiIMkq3H3IMBAJoaWmBy+XCrbfeipaWloh/3377Le68804jYiUiIiIiynjdvoJ99OhRXHHFFXC73VBVFRUVFVHTjBkzpruLISIiIiLKCt1OsIuLi/GXv/wFbrcbkydPxh/+8IeI8RaLBSeeeGJ3F0NERERElBUMuQe7f//+AIBt27YZMTsiIiIioqxlSII9depU/O53v8PEiRMhCILuNK+++qoRiyIiIiIiymiGJNg33HADAGD69OlGzI6IiIiIKGsZkmBPmDABQPAWkYULF6KgoMCI2RIRERERZZ1ud9MX7v3334fFYjFylkREREREWcXQF8384Ac/wK233orLLrsMxcXFEfdjjxs3zshFERERERFlJEMT7A8//BAA8Pzzz0cM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Ei8RERERkdEMvQf76aefxkcffYSJEydi48aNuPDCCzF37lxs3brVyMUQEREREWUsQxNsACgoKMB1112H1atX4/HHH8ff/vY3/PSnPzV6MUREREREGcnwO9j37NmDTZs24Y033oDH48GECRNw7bXXGr0YIiIiIqKMZGiCPXHiROzbtw9jx47FL3/5S4wePRqiaPhFciIiIiKijGVogn3jjTfiyiuvTPjBRiIiIiKi3sbQy8vXXXcdnE4nnnzySVRXV6OpqQmvvfaakYsgIiIiIspohibYH3/8MSZNmoQDBw7grbfeQktLC371q19h1apVRi6GiIiIiChjGZpgL126FMuXL8djjz0GSZIwcOBAvPjii1izZo2Ri0mJocPO7HIZnz/QA5EQERERUTYx9B7s/fv3Y9SoUQAAQQi+lnPo0KFobm42cjEpkZ9n6/LrtFPxKm0iIiIiymyGXsEuLS3Fm2++GTHsgw8+wGmnnWbkYoiIiIiIMpahV7Dvvvtu3HrrrXjttdfgdrsxb948vP/++1ixYoWRiyEiIiIiyliGJtjl5eV44403sHHjRpxyyikYMGAAZs+ejcGDBxu5GCIiIiKijGVIgh0IBLBixQrk5eXh1ltvxSWXXIIZM2bg0KFD+Oijj/D000+jb9++RiyKiIiIiCijGXIP9sqVK/HWW2/h+9//PgDgoYcewtChQ/H++++jtLQUjz/+uBGLISIiIiLKeIZcwd64cSOeeeYZlJaW4tixY6ipqcGGDRswYMAAzJw5E5MnTzZiMUREREREGc+QK9gNDQ0oLS0FAHz66acoKCjAWWedBQAoLi5GS0uLEYshIiIiIsp4hiTYdrtdS6JrampQXl6u9YN98OBBFBQUGLEYSgO+cIeIiIioawy5ReTCCy/Eo48+issvvxx//OMfMX/+fADBhx+ffPJJjB492ojFUBrwhTtEREREXWPIFey7774be/fuxcyZM3HJJZdg4sSJAIAxY8Zg+/btmD17thGLISIiIiLKeIZcwe7fvz/WrFkTNXzx4sUYMWIE7Ha7EYshIiIiIsp4hr5opqMLL7ywJ2dPRERERJRxDLlFhIiIiIiIgphgExEREREZiAk2EREREZGBMjLBfuGFF3Dvvffqjnv33Xdx5plnoqysTPvndDpTHCERERERkb6MSrD9fj+eeuopLFu2LOY0u3fvxvTp01FXV6f9czgcKYySiIiIiCi2jEqwFy9ejPr6elx//fUxp9m9eze+973vpTAqIiIiIqLEZVSCfdttt+HZZ59F//79Y06ze/du/PGPf8To0aMxYcIEvP/++ymMkIiIiIgovh7tB7urTjzxxLjjVVXFgAEDMGnSJFx22WX45JNPMGfOHLz22msYNGhQwsupr6/vdJry8vKE5xeutrY2qXKZqjfWQ7LrBHS+Xt2Zd7hE2mgm13E4xmksI+JMZTsFsqduAcbaE5KNk+00PVgP7RKpi1jtNKMS7M4IgoCXXnpJ+3zRRRehoqICf/3rX+PeVqGoxQ4AACAASURBVNLR8OHDYbVaeyJEww4I2a631kOq1quzNlpbW5sVdcw4jZVpcSZyLM20mONhrMbLhDh7WzvtSayHdt2ti4y6RaQzR48ejXoA0u/3w2KxpCkiIiIiIqJIWZVgFxUV4bXXXsO6deugKAo2b96M+vp6XHzxxekOjYiIiIgIQJYk2GVlZdixYwfMZjOeeeYZ/OEPf0B5eTmefPJJrFixgt30EREREVHGyMh7sO+4446Iz3V1ddrfZ599Nl5++eVUh0RERERElJCsuIJNRERERJQtmGATERERERmICTYRERERkYGYYBMRERERGYgJNhERERGRgZhgExEREREZiAk2EREREZGBmGATERERERmICTYRERERkYGYYBMRERERGYgJNhERERGRgZhgExEREREZiAk2EREREZGBmGATERERERmICTYRERERkYGYYBMRERERGYgJNhERERGRgZhgExEREREZiAk2EREREZGBmGATERERERmICTYRERERkYGYYBMRERERGYgJNhERERGRgZhgExEREREZKCMT7BdeeAH33nuv7rjDhw9j+vTpKCsrw8SJE/HFF1+kODoiIiIiothM6Q4gnN/vx8qVK7Fy5Upcd911utP88pe/xDnnnIPnnnsOGzZsQHV1NV555ZUUR0qUPoqioviUIWg41gZBAERRgEkSEFAAOaDAbBLRJ98KURTizqOp1Qu/3D49ADS1eqEoavCfqkIUBAgiIEBAQFEBAYAKBAIqJEmA1SxCVlQoARVyQIVJEiCKAnz+ACRJxODSYTjW5EZAUaFCBY7PxywJEAQBAUUBIEBRVEiiAEkU4D1e1m4RISuA368goCiQJBFWiwifT4EcUGE2i1AVFQFF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d9xxB9555x2Yzeak2kj2M9u1tbXdCbXX6Mt5CH8sxKvZ1uD2IhSS4uYlVXd67GiODh52mhpXbpY1bozK9twsKwQT4u5jFtr+3dLiw96vv4zbR+Qx0ft1JFXzJ1E8DpsFYoLx6IxMmeepiLOn5inQdg4lmqeJziW9GCmWjmRKrF2NsyfnaVf7ypQx6Ize+Jq6KplcJJo7aVtg9+/fHytWrFAfn3322XjiiSfg93fv3S+r1YrTTz8dV155JQDgpz/9KV544QXU19ejqKgoqTbGjh0Lu93e7j5GuS223vp6HhrcHhS4nJqFQYHLCbNZSGteOpqj9QePqXE1eYJxY1S2N3mCyM+xx90nJLX9OzvboXlN7iZf3GOi92tPKudPonh8ARGWbo5Hpsxzo8WZzLW04bhHMx97+lzqDKPltz2ZEqsR4kxmnnaV3q8t1YwwXkbR3Vyk7SMie/bswe23347rrrsO1157La699lpcddVVmDhxYrfaLSoqQnNzs/pYlmVIkqTejp0olfKcNlRWlKHA5QQA9XOjeU6brnE1nWjAsnnlKHA58cbmPVg4u1gT44JZxdi0rU79v9UqxLyOJXNL8ebHe9TPVudna38A5Wfb1T6UY+Lt11PixbNwdjEK+mfBlevQJSbqmNUaQmVFmTofo8+l/Cx9zyUionRI2zvY999/P0455RScddZZ2L9/PyZNmoRXX30Vt956a7fanThxIjweD1555RVcf/31WLNmDYYPH46RI0emKHKiNg6HBcMH5qDq9vMRCkkwmwVDVBHxejwYPSoPjy+8AEFRgkUwYdXt52uqiPz8x+dAEEy4/bpzkZ9tx8A8GatuPx+iJMMihKuIzPnRaNw0I351EEEwoXBIWx96VxFR4nlswQXwB0MQTKwikgn2fv01zjprHG798TkAgKrbz2cVESLq9dJ2Zdu9ezfWrl2L//znP1ixYgV++tOfoqysDA888AB+/vOfd7nd7OxsVFdXY8WKFXjqqadw+umn4+mnn05h5ERaDocFDofFcH86EwRTp965FQQTBrmyNNvyslPbR7oJggn984wTDyVHOYeIiPqKtF3x+vXrB6vVilNPPRV79+4FEP4c9oEDB7rd9ujRo7Fu3bput0NERERElGpp+7vqmWeeicceewyhUAgFBQX46KOPsGXLFjidznR1SURERESku7S9g33fffdh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RMLzSdluNps6VUWktrYWxcXj1VwqVUuMWEUkU95pjIzTiPM0UlfeIe6JY7rTV2e1eHzIznJ06piufHwlE3T3HMu4FZPT6cRzzz2H5cuX495778XEiRNx9913p6x9h8MCh8OSMRevdGEe2mRSLgTBBFduxxfHePvlWRzIy05tPJ3JWXaK+05Wdra+i5WOxizyub0eT5fa0EMqzpucZOZEbie3d8CIuewtmFvjy85y9MhCvi/IuAU2AIwfPx4bNmzQOwwiIiIiohgZ9xlsIiIiImpfIBgydD89FZ9eMvIdbCIiIiJKrKuVR3qin672lUn4DjYRERER9aiuvIPdU8cAwOgxZ3XpOEWfegdbKZgSCCR3F77Iett9GfPQJplc2Gy2mPrFyerMHM2UcWGcqZWqOHtqngKZk1uAsaZDd+LsqXma6XWyM1FX32Hv7Hyy2+1dfoc92b7izdOMK9PXHU1NTfj666/1DoN6ue7c1IBzlHoK5yllAs5TygTx5mmfWmBLkoSWlhZYrdYu/0ZM1JHuvOPCOUo9hfOUMgHnKWWCPv8ONhERERFRuvFLjkREREREKcQFNhERERFRCnGBTURERESUQlxgExERERGlEBfYREREREQpxAU2EREREVEKcYFNRERERJRCXGAn8Lvf/Q4PPPCA3mHoZvPmzbjssstQUlKCG264Ad9++63eIelm7dq1uOCCCzB+/HjMnz8fx44d0y2W7du3Y8aMGTj33HNx2223obm5WbdYIiWaL9dccw3OPfdcFBcXo7i4GKtWrdI5UuBXv/oVzj77bDWma6+9FgDw+uuv4/zzz0dpaSmeeOIJXWN8++231fiKi4tx7rnnYtSoUfjss88MmdN4jDBXE83LRGMtiiLuv/9+TJgwARdeeCHee+899bnDhw9j7ty5KC4uxtVXX52WOwR++umnGDdunPrYiHHW19fj5ptvRmlpKa6++mrs3LnTsLEmwwjz1AgSXRf7kuh134cffogpU6aguLgYlZWVCAaDnWtQJo1AICCvXr1aHj16tHz//ffrHY4uDh48KJeWlsrbt2+XRVGUX3zxRXnGjBl6h6WL7du3yxdccIFcX18vBwIBecmSJfLSpUt1icXj8cg/+MEP5I8//lj2er3y4sWL5VWrVukSS6RE80UURXncuHFyc3Oz3iFq3HzzzfLHH3+s2fb555/L559/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\n",
      "text/plain": [
       "<Figure size 720x720 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(variables)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- From the graph we can assess that:**\n",
    "\n",
    "    - The most numerous infected families have severity level of 3, while the families that have never 5 or lower members infected register a severity level of 1 or 2;\n",
    "    - The ones that have higher individual expenses have a disease level severity of 1. Additionally, the expenses decrease with the increase in the severity level;\n",
    "    - The families with more infected members seems to have also younger individuals in the family;\n",
    "    - The individuals between ages of 25 and 50 are the ones that have higher individual medical expenses;\n",
    "    - The individuals that have higher individual medical expenses are the ones that have lower number of infected cases in the family."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a  id=\"further\">\n",
    "\n",
    "# 5. Further Analysis\n",
    "\n",
    "</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check for duplicates in Patient_ID columns on train and test dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False False\n"
     ]
    }
   ],
   "source": [
    "print(test['Patient_ID'].duplicated().any(), train['Patient_ID'].duplicated().any())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- There is no more than one patient with the same patient_ID"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check the distribution of the variable 'Decreased'**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Deceased\n",
       "0    347\n",
       "1    553\n",
       "Name: Patient_ID, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_deceased = train.groupby(['Deceased'])['Patient_ID'].count()\n",
    "colors = [\"#6497b1\", \"#006e96\", \"#033f6c\", '#63ace5']\n",
    "label = ['n = 344', 'n = 553']\n",
    "train_deceased.plot(kind=\"bar\", figsize=(5,5), color=colors)\n",
    "train_deceased\n",
    "\n",
    "# 0 - Passed away\n",
    "# 1 - Did not passed away"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check variable 'Age' distribution**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fbb27b6bdd0>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_birthday = train[['Age', 'Deceased', 'Patient_ID']].drop_duplicates()\n",
    "train_birthday = train_birthday.pivot_table(values='Patient_ID', columns='Deceased', index='Age', aggfunc='count')\n",
    "train_birthday.iloc[:,0:2].plot.barh(stacked = True, figsize=(20,20), color=colors)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- The majority of the population is 30 years old (1990)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check the variable 'Deceased' distribution based on the 'Severity'**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Deceased</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Severity</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>136</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>88</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>123</td>\n",
       "      <td>375</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Deceased    0    1\n",
       "Severity          \n",
       "1         136   80\n",
       "2          88   98\n",
       "3         123  375"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_severity = train[['Severity', 'Deceased', 'Patient_ID']].drop_duplicates()\n",
    "train_severity = train_severity.pivot_table(values='Patient_ID', columns='Deceased', index='Severity', aggfunc='count')\n",
    "train_severity.iloc[:,0:2].plot.bar(stacked = True, figsize=(5,5), color=colors)\n",
    "train_severity\n",
    "\n",
    "# Deceased:\n",
    "# 0 - Passed away\n",
    "# 1 - Did not passed away"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check the variable 'Deceased' distribution based on the 'City'**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Deceased</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>city</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>223</td>\n",
       "      <td>428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>94</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Deceased    0    1\n",
       "city              \n",
       "0         223  428\n",
       "1          94   75\n",
       "2          30   50"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_city = train[['city', 'Deceased', 'Patient_ID']].drop_duplicates()\n",
    "train_city = train_city.pivot_table(values='Patient_ID', columns='Deceased', index='city', aggfunc='count')\n",
    "train_city.iloc[:,0:2].plot.bar(stacked = True, figsize=(5,5), color=colors)\n",
    "train_city\n",
    "\n",
    "# Deceased:\n",
    "# 0 - Passed away\n",
    "# 1 - Did not passed away"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check the variable 'Ind_Medical_Expenses' distribution based on the 'City'**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "city\n",
       "0    415.161767\n",
       "1    873.886627\n",
       "2    250.343625\n",
       "Name: Ind_Medical_Expenses, dtype: float64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAUMAAAE+CAYAAAAXj3IYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAUoUlEQVR4nO3df2yUB/3A8XcL7V09ieAWwIH9ERamSyODAjKKVunUFrOySKI0TEYjxFmnA5lji0FaYbrMIGaEQXDGZh1N5jZCFFudKwMyAjhKM+w2hgH6Y3YDwhijtL3+oN8/DPddx6C09Li2vF8JCfc8z919nqflzT13vWtcV1dXF5J0g4uP9QCSNBAYQ0nCGEoSYAwlCYDhsR7g4y5cuMD58+dJSEggLi4u1uNIGiK6urpob28nFAoRH3/p48ABF8Pz589z5MiRWI8haYiaOHEiI0aMuGT5gIthQkIC8L+BExMTYzxN79TU1JCenh7rMW4oHvPrb7Ae87a2No4cORJpzMcNuBhePDVOTEwkEAjEeJreG4wzD3Ye8+tvMB/zyz395gsokoQxlCTAGEoSYAwlCTCGkgQYQ0kCjKEkAcZQkgBjKEmAMZQkwBjqOmjvjN5vlsjIyIjabUN0Z9fAMuDem6yhJ2FYHItfbIz1GH3y9LxbYj2CrhMfGUoSxlCSAGMoSYAxlCTAGEoSYAwlCTCGkgQYQ0kCjKEkAcZQkgBjKEmAMZQkwBhKEmAMJQkwhpIEGENJAoyhJAFXGcO9e/cyZ84cMjIy+P73v09tbS0AZWVlzJo1i2nTprF27drI9h0dHaxcuZKpU6eSlZVFeXl5VIaXpP7SYww7OztZunQpxcXFvPbaa0yePJlf/epXHDp0iI0bN1JWVsb27duprKxk586dAJSUlNDQ0MCuXbtYt24dxcXFnDlzJtr7Ikl91mMMz549ywcffMCFCxfo6uoiPj6eQCBARUUFeXl5JCcnM2bMGBYuXMi2bdsAKC8vp6CggFAoxJQpU8jMzKSioiLqOyNJfdXjL4T67Gc/y3e+8x0WLlzIsGHDGDlyJM899xy//vWvmT17dmS7lJQUtmzZAkBdXR1paWmRdcnJyRw7dqxXg9XU1PRq+4Giqqoq1iMMONH+DXbR5tf0UkPxmPQYw87OTkaOHElpaSmTJk1i/fr1PPTQQwSDQZKSkiLbBQIBWltbAWhubiYYDEbWBYNBTp061avB0tPTCQQCvbpOrFVVVQ36f/i6lF/T7gbr93k4HL7ig6weT5P/8Y9/8M477zB9+nQCgQDLli3jyJEjJCQkEA6Hu93RxTgGg8Fu61pbW7uFU5IGmh5j+N5779He3v7/V4iPJy4ujqSkJOrr6yPLa2trSU1NBSAtLa3buo+fNkvSQNNjDGfMmMHevXt59dVX6ejoYNOmTaSkpLB48WK2bt3K8ePHOXnyJKWlpeTm5gKQk5PD5s2baWpqorq6mj179pCdnR31nZGkvurxOcPbb7+dxx57jNWrV3P69Gm+9KUvsX79esaPH09hYSEFBQW0tLSQn58fieGiRYtobGwkOzubUCjEmjVrGDt2bNR3RpL6Kq6rq6sr1kN81MUnOX0BZWhZ/GJjrEfok6fn3RLrEQacwfp93lNbfDueJGEMJQkwhpIEGENJAoyhJAHGUJIAYyhJgDGUJMAYShJgDCUJMIaSBBhDSQKMoSQBxlCSAGMoSYAxlCTAGEoSYAwlCTCGkgQYQ0kCjKEkAcZQkgBjKEmAMZQkwBhKEmAMJQkwhpIEGENJAoyhJAHGUJIAYyhJgDGUJMAYShJgDCUJMIaSBBhDSQKMoSQBxlCSAGMoSYAxlCTAGEoSYAwlCTCGkgQYQ0kCjKEkAcZQkgBjKEmAMZQkwBhKEnCVMWxoaKCgoIBp06Zxzz33UFNTA0BZWRmzZs1i2rRprF27NrJ9R0cHK1euZOrUqWRlZVFeXh6d6SWpn/QYw87OThYvXkxWVhb79+9nwYIFLF++nEOHDrFx40bKysrYvn07lZWV7Ny5E4CSkhIaGhrYtWsX69ato7i4mDNnzkR7XySpz3qM4cGDB0lMTGTRokXEx8czb9481q5dS3l5OXl5eSQnJzNmzBgWLlzItm3bACgvL6egoIBQKMSUKVPIzMykoqIi6jsjSX01vKcNDh8+TGpqKo8++ig7duxgwoQJrF69mrq6OmbPnh3ZLiUlhS1btgBQV1dHWlpaZF1ycjLHjh3r1WAXT8UHm6qqqliPMOBkZGTEeoRr4tf0UkPxmPQYw3PnzlFZWcnjjz9OcXExzzzzDA888AA333wzSUlJke0CgQCtra0ANDc3EwwGI+uCwSCnTp3q1WDp6ekEAoFeXSfWqqqqBv0/fF3Kr2l3g/X7PBwOX/FBVo+nyQkJCdx6663k5eWRmJjID37wA06ePEkgECAcDne7o4txDAaD3da1trZ2C6ckDTQ9xjA1NZWmpqbI5a6uLi5cuEAwGKS+vj6yvLa2ltTUVADS0tK6rfv4abMkDTQ9xnDmzJk0NzdTWlpKZ2cnf/zjHxk/fjxLlixh69atHD9+nJMnT1JaWkpubi4AOTk5bN68maamJqqrq9mzZw/Z2dlR3xlJ6qsenzMMhUKUlJRQVFTEunXruPXWW/n973/PhAkTKCwspKCggJaWFvLz8yMxXLRoEY2NjWRnZxMKhVizZg1jx46N+s5IUl/FdXV1dcV6iI+6+CSnL6AMLYtfbIz1CH3y9LxbYj3CgDNYv897aotvx5MkjKEkAcZQkgBjKEmAMZQkwBhKEmAMJQkwhpIEGENJAoyhJAHGUJIAYyhJgDGUJMAYShJgDCUJMIaSBBhDSQKMoSQBxlCSAGMoSYAxlCTAGEoSYAwlCTCGkgQYQ0kCjKEkAcZQkgBjKEmAMZQkwBhKEmAMJQkwhpIEGENJAoyhJAHGUJIAYyhJgDGUJMAYShJgDCUJMIaSBBhDSQKMoSQBxlCSAGMoSYAxlCTAGEoSYAwlCTCGkgTcgDFs7+yK2m1nZGRE7bYhurNLN7rhV7vhvn37+OEPf8jrr78OQFlZGU899RThcJj58+ezfPlyADo6OiguLqaiooJQKMSKFSuYM2dOdKbvg4RhcSx+sTHWY/TJ0/NuifUI0pB1VTFsaWlh1apVXLhwAYBDhw6xceNGysrKCAQCFBQUkJGRwde+9jVKSkpoaGhg165dvP322/zoRz/izjvvZNSoUVHdEUm6Fld1mvy73/2Or3zlK5HLFRUV5OXlkZyczJgxY1i4cCHbtm0DoLy8nIKCAkKhEFOmTCEzM5OKioroTC9J/aTHGFZXV3Po0CHuu+++yLLa2lpSU1Mjl1NSUjh69CgAdXV1pKWlRdYlJydz7NixfhxZkvrfFU+T29raWLVqFb/97W+Ji4uLLG9ubiYpKSlyORAI0NraGlkXDAYj64LBIKdOner1YDU1Nb2+ztWI9osc0VZVVRXrEXrNYz70DMVjcsUYrl+/ntmzZ3PbbbfxzjvvRJYnJSURDocjl8PhcCSOwWCw27rW1tZu4bxa6enpBAKBXl9vqBvsYRmMPObdVVVVDcpjEg6Hr/gg64ox/Oc//8mpU6d49tlnuXDhAm1tbUydOpVvfOMb1NfXR7b76GlzWloa9fX1fP7znwf+d9o8derUftgVSYqeKz5n+Pe//52qqioOHDjAX/7yFxITEzlw4ADz589n69atHD9+nJMnT1JaWkpubi4AOTk5bN68maamJqqrq9mzZw/Z2dnXZWckqa+u+ucMP2rSpEkUFhZSUFBAS0sL+fn5kRguWrSIxsZGsrOzCYVCrFmzhrFjx/br0JLU3646huPHj+ff//535HJ+fj75+fmXbJeYmEhRURFFRUX9MqAkXQ833NvxJOmTGENJwhhKEmAMJQkwhpIEGENJAoyhJAHGUJIAYyhJgDGUJMAYShJgDCUJMIaSBBhDSQKMoSQBxlCSAGMoSYAxlCTAGEoSYAwlCTCGkgQYQ0kCjKEkAcZQkgBjKEmAMZQkwBhKEmAMJQkwhpIEGENJAoyhJAHGUJIAYyhJgDGUJMAYShJgDCUJMIaSBBhDSQKMoTQktXd2Re22MzIyonbbEN3Zr2R4TO5VUlQlDItj8YuNsR6jT56ed0tM7tdHhpKEMZQkwBhKEmAMJQkwhpIEGENJAoyhJAHGUJIAYyhJwFXGcMeOHcyZM4eMjAwWLFjA0aNHASgrK2PWrFlMmzaNtWvXRrbv6Ohg5cqVTJ06laysLMrLy6MzvST1kx5j+N577/HII4+wevVq/vWvf/H1r3+dBx98kEOHDrFx40bKysrYvn07lZWV7Ny5E4CSkhIaGhrYtWsX69ato7i4mDNnzkR7XySpz3qM4bvvvsu8efPIyMhg2LBh5Ofn85///Ift27eTl5dHcnIyY8aMYeHChWzbtg2A8vJyCgoKCIVCTJkyhczMTCoqKqK+M5LUVz3GcPLkyaxYsSJyeffu3YwbN46GhgZSU1Mjy1NSUiKnz3V1daSlpUXWJScnc+zYsX4cW5L6V68+tebw4cMUFRWxevVqtmzZQlJSUmRdIBCgtbUVgObmZoLBYGRdMBjk1KlTvRqspqamV9tfrWh//FC0VVVVxXqEXvOYX38e89676hgeOHCAH//4xyxbtoxvfvObbN26lXA4HFkfDocjcQwGg93Wtba2dgvn1UhPTycQCPTqOjeCwf5NPhh5zK+/aBzzcDh8xQdZV/Vq8u7du7n//vtZtWoV8+fPByAtLY36+vrINrW1tZHT5o+v+/hpsyQNND3GsKGhgaVLl/LEE08wZ86cyPKcnBy2bt3K8ePHOXnyJKWlpeTm5kbWbd68maamJqqrq9mzZw/Z2dnR2wtJukY9nia/8MILNDc3s3z58m7LX375ZQoLCykoKKClpYX8/PxIDBctWkRjYyPZ2dmEQiHWrFnD2LFjo7MHktQP4rq6umLzCwcu4+J5fTSfM/Tj0K8/j/n15zHvrqe2+HY8ScIYShJgDCUJMIaSBBhDSQKMoSQBxlCSAGMoSYAxlCTAGEoSYAwlCTCGkgQYQ0kCjKEkAcZQkgBjKEmAMZQkwBhKEmAMJQkwhpIEGENJAoyhJAHGUJIAYyhJgDGUJMAYShJgDCUJMIaSBBhDSQKMoSQBxlCSAGMoSYAxlCTAGEoSYAwlCTCGkgQYQ0kCjKEkAcZQkgBjKEmAMZQkwBhKEmAMJQkwhpIEGENJAoyhJAHGUJIAYyhJgDGUJMAYShIQxRgeOHCAb3/729xxxx0UFhbS1NQUrbuSpGsWlRi2tLTw05/+lIcffph9+/YRDAbZsGFDNO5KkvrF8Gjc6L59+xg3bhxZWVkAPPDAA9x7772sWLGix+t2dXUB0NbWFo3RABgxvCNqtx1N4XA41iP0mcf8+vOYd3exKRcb83FRiWFdXR2pqamRy8nJyZw+fZoPPviAkSNHXvG67e3tABw5ciQaowFw7/io3XRU1dScivUIfeYxv/485p+svb2dYDB4yfKoxPD8+fMkJSX9/50MH05CQgKtra09XjcUCjFx4kQSEhKIi4uLxniSbkBdXV20t7cTCoU+cX1UYpiUlNTtoW5HRwft7e3dAnk58fHxjBgxIhpjSbrBfdIjwoui8gJKWloadXV1kct1dXWMGjWKz3zmM9G4O0m6ZlGJ4YwZM6irq6OyspLW1laeeuopcnNzo3FXktQv4rou99LKNTp48CCrVq3iv//9LzNnzuTxxx/n05/+dDTuSpKuWdRiKEmDiW/HkySMoSQBxlCSAGMoSYAxvGYffvghJ06c4Ny5c7EeRYqKy71z7P3337/Ok0SXMeyD8+fP88QTT5CZmcn06dPJzs5m2rRpzJw5kzVr1tDc3BzrEaVrdvToUe6++24mT57MXXfdxcsvv9xt/V133RWjyaLDGPbBihUrOHHiBM8++yxvvPEGNTU1vPHGG5SWlnLmzBkeeeSRWI8oXbOioiLuueceqqqqWL58Ob/4xS94/vnnI+uH2k/lReW9yUPdnj172L9/P4mJiZFlw4YNY8KECTz22GPMmjUrhtMNXatWrerxwzuKioquzzA3gMOHD/PMM88QFxdHbm4uaWlp3HfffYwYMYKcnJwh90EqPjLsg3HjxrF///5PXLd3715uueWW6zzRjSE5OZk///nPxMfHc/PNN3/iH/Wf0aNH8/rrr0cuf+ELX2DDhg388pe/ZOfOnbEbLEp8B0ofHDhwgAcffJDx48eTmppKMBikra2N2tpa6uvr2bBhA3fccUesxxySnnzySd588002bdoU61GGvB07dvDoo48yb948Hn744cjy3bt3s2zZMlpaWnjzzTdjOGH/MoZ91Nrayr59+6itraW5uZmkpCTS0tKYMWPGFT8mSNemo6OD3/zmNxQWFnLTTTfFepwh78SJE7z77ruX/Ofe0NDAiy++yNKlS2M0Wf8zhpKEzxlKEmAMJQkwhhoCGhoaYj2ChgBjqEFn06ZN/OxnPwPgrbfe4rvf/W6MJ9JQ4A9da9C5//77I3//8MMPI79eVroWPjLUgFZdXc33vvc9Jk+ezLe+9S1eeukl1q9fT2FhIadPn2bJkiWcO3eOyZMnc/DgQSZNmsT58+cj19+wYQM/+clPYrgHGiyMoQas999/nyVLlpCXl8drr71GUVERDz30EI2NjQDcdNNN/OEPf2DEiBFUV1czZcoURo8eTWVlZeQ2/va3vzF37txY7YIGEWOoAeuVV15hzJgxLFiwgOHDh3PnnXdSVlbGyJEjL3udu+++m/LycuB/zyeePn2ar371q9drZA1ixlAD1unTp/nc5z7XbVl6ejqf+tSnLnuduXPn8uqrr3L27Fn++te/kpOT0+0DNaTLMYYasEaPHs2JEye6LSspKeGtt9667HVSUlK4/fbbeeWVV3jppZfIy8uL9pgaIoyhBqysrCxOnDjB888/T2dnJ3v37uXJJ59kxIgRkW0SExNpa2sjHA5Hls2dO5c//elPAGRkZFz3uTU4GUMNWKNGjWLz5s288MILTJ8+ndWrV7N27VrGjx8f2ea2227ji1/8Il/+8pd5++23AcjNzY18SrN0tfygBg05HR0dZGZm8txzz5GamhrrcTRI+EPXGlKOHj1KRUUFEydONITqFWOoIeXnP/85Z8+eZePGjbEeRYOMp8mShC+gSBJgDCUJMIaSBBhDSQKMoSQB8H/Kx/5nbwyeEgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_city_expenses = train.groupby(['city'])['Ind_Medical_Expenses'].mean()\n",
    "train_city_expenses.plot.bar(stacked = True, figsize=(5,5), color='#63ace5')\n",
    "train_city_expenses\n",
    "\n",
    "# City:\n",
    "# 0 - Santa Fe\n",
    "# 1 - Albuquerque\n",
    "# 2 - Taos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check the variable 'Deceased' distribution based on the 'Ind_Medical_Expenses'**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Deceased\n",
       "0    673.546657\n",
       "1    369.374231\n",
       "Name: Ind_Medical_Expenses, dtype: float64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_medical_expenses = train.groupby(['Deceased'])['Ind_Medical_Expenses'].mean()\n",
    "train_medical_expenses.plot.bar(stacked = True, figsize=(5,5), color='#63ace5')\n",
    "train_medical_expenses\n",
    "\n",
    "# Deceased:\n",
    "# 0 - Passed away\n",
    "# 1 - Did not passed away"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Correlation between variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Set the index to become the ‘Patient_ID’ column\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TRAIN\n",
    "train = train.set_index('Patient_ID')\n",
    "# TEST\n",
    "test = test.set_index('Patient_ID')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Associate the variable Deceased to the target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = train.Deceased"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Drop the columns Deceased and Family_Case_ID on the train set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = train.drop(columns=['Deceased', 'Family_Case_ID'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Plot the correlation matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fbb263a0e10>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x648 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define the model to standardize the data\n",
    "scaler = StandardScaler()\n",
    "\n",
    "# Fit to data, then transform it\n",
    "variables_Norm = scaler.fit_transform(train)\n",
    "\n",
    "# Create a dataframe with the variables fitted with the columns from data \n",
    "variables_Norm = pd.DataFrame(variables_Norm, columns = train.columns)\n",
    "\n",
    "# Compute the correlation:\n",
    "correlation = variables_Norm.corr().round(2)\n",
    "\n",
    "# Generate a mask for the upper triangle\n",
    "mask = np.zeros_like(correlation, dtype=np.bool)\n",
    "mask[np.triu_indices_from(mask)] = True\n",
    "\n",
    "# Set up the matplotlib figure\n",
    "f, ax = plt.subplots(figsize=(11, 9))\n",
    "\n",
    "# Generate a custom diverging colormap\n",
    "cmap = sns.diverging_palette(220,10, as_cmap=True)\n",
    "\n",
    "# Draw the heatmap with the mask and correct aspect ratio\n",
    "sns.heatmap(correlation, mask=mask, cmap=cmap, vmax=1, vmin=-1, center=0,square=True, linewidths=.5, annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- The variable Medical_Tent has high correlation with Severity. They probably share the same information, but since they share a correlation lower than 80% we will keep both of them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "<a id=\"feature\">\n",
    "    \n",
    "# 6. Feature Selection: RFE\n",
    "    \n",
    "</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check the shape of our data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(900, 7)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- We went from 11 columns to 7 columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check the score of the estimator by chosing between 1 to 7 variables.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- We will use RandomForest to perform Feature Selection. Feature selection using Random forest comes under the category of Wrapper methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimum number of features: 6\n",
      "Score with 6 features: 0.833333\n"
     ]
    }
   ],
   "source": [
    "# Number of features\n",
    "nof_list=np.arange(1,7)            \n",
    "high_score=0\n",
    "\n",
    "# Variable to store the optimum features\n",
    "nof=0           \n",
    "score_list =[]\n",
    "for n in range(len(nof_list)):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(train, target, test_size = 0.3, random_state = 15)\n",
    "    model = RandomForestClassifier()\n",
    "    rfe = RFE(model,nof_list[n])\n",
    "    X_train_rfe = rfe.fit_transform(X_train,y_train)\n",
    "    X_test_rfe = rfe.transform(X_test)\n",
    "    model.fit(X_train_rfe,y_train)\n",
    "    score = model.score(X_test_rfe,y_test)\n",
    "    score_list.append(score)\n",
    "    \n",
    "    if(score>high_score):\n",
    "        high_score = score\n",
    "        nof = nof_list[n]\n",
    "        \n",
    "print(\"Optimum number of features: %d\" %nof)\n",
    "print(\"Score with %d features: %f\" % (nof, high_score))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- From the above calculation we decided to mantain 6 variables."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check which variables we should use**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Severity                1\n",
       "Medical_Tent            1\n",
       "Age                     1\n",
       "Sex                     1\n",
       "Total_cases             1\n",
       "Ind_Medical_Expenses    1\n",
       "city                    2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_rfe = RandomForestClassifier()\n",
    "rfe = RFE(estimator = model_rfe, n_features_to_select = 6)\n",
    "X_rfe = rfe.fit_transform(X = train, y = target) \n",
    "model_rfe.fit(X = X_rfe,y = target)\n",
    "selected_features = pd.Series(rfe.ranking_, index = train.columns)\n",
    "selected_features.sort_values()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Define a set with the variables selected with RFE**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfe_variables = ['Severity','Medical_Tent','Age', 'Sex','Total_cases',\n",
    "                 'Ind_Medical_Expenses']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Define a set with all the variables for one of the models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_variables = ['Severity','Medical_Tent','Age', 'Sex','Total_cases',\n",
    "                 'Ind_Medical_Expenses', 'city']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "<a id=\"model\">\n",
    "    \n",
    "# 7. MODELS\n",
    "    \n",
    "</a>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preparation for the models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Define data and test, based on the results of RFE**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Select only the rfe_variables and save them in data\n",
    "data = train[rfe_variables]\n",
    "\n",
    "# Create a copy of the test set to be used later\n",
    "test_copy = test.copy()\n",
    "\n",
    "# Select only the rfe_variables and save them in test\n",
    "test = test[rfe_variables]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Using the method __train_test_split__, split the __data__ into __X_train__ and __X_val__, the __target__ into __y_train__ and __y_val__, and define the following arguments:**\n",
    "- __test_size__ = 0.3\n",
    "- __random_state__ = 15\n",
    "- __shuffle__ = True\n",
    "- __stratify__ = target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_val, y_train, y_val = train_test_split(data, \n",
    "                                                    target, \n",
    "                                                    test_size=0.3, \n",
    "                                                    random_state=15, \n",
    "                                                    shuffle=True, \n",
    "                                                    stratify=target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Create an object named min_max1 that will contain an instance of MinMaxScaler() between 0 and 1 fitted to X_train**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "min_max = MinMaxScaler().fit(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Create an object named min_max2 that will contain an instance of MinMaxScaler() between -1 and 1 fitted to X_train**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "min_max2 = MinMaxScaler(feature_range=(-1,1)).fit(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Create an object named scaler that will contain an instance of StandardScaler() fitted to X_train**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler().fit(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Create an object named robust that will contain an instance of RobustScaler() fitted to X_train**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "robust = RobustScaler().fit(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Before we start we will take a look on the accuracies of different classifiers, in order to see which one we should invest on**\n",
    "- These models represent our baselines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy eclf: 0.82 (+/- 0.00)\n",
      "Accuracy hist: 0.83 (+/- 0.00)\n",
      "Accuracy gradient: 0.84 (+/- 0.00)\n",
      "Accuracy ada: 0.82 (+/- 0.00)\n",
      "Accuracy extra: 0.81 (+/- 0.00)\n",
      "Accuracy random: 0.84 (+/- 0.00)\n",
      "Accuracy bg: 0.82 (+/- 0.00)\n",
      "Accuracy dt: 0.78 (+/- 0.00)\n",
      "Accuracy gnb: 0.79 (+/- 0.00)\n",
      "Accuracy KNN: 0.66 (+/- 0.00)\n",
      "Accuracy BNB: 0.79 (+/- 0.00)\n",
      "Accuracy LR: 0.80 (+/- 0.00)\n",
      "Accuracy SGD: 0.59 (+/- 0.00)\n",
      "Accuracy SVC: 0.70 (+/- 0.00)\n",
      "Accuracy LSVC: 0.61 (+/- 0.00)\n",
      "Accuracy NSVC: 0.72 (+/- 0.00)\n",
      "Accuracy mlp: 0.75 (+/- 0.00)\n"
     ]
    }
   ],
   "source": [
    "# Initialize our classifiers\n",
    "dt = DecisionTreeClassifier()\n",
    "gnb = GaussianNB()\n",
    "KNN = KNeighborsClassifier(n_neighbors=1)\n",
    "MNB = MultinomialNB()\n",
    "BNB = BernoulliNB()\n",
    "LR = LogisticRegression()\n",
    "SGD = SGDClassifier()\n",
    "SVC = SVC()\n",
    "LSVC = LinearSVC()\n",
    "NSVC = NuSVC()\n",
    "bg = BaggingClassifier()\n",
    "random = RandomForestClassifier()\n",
    "extra = ExtraTreesClassifier()\n",
    "ada = AdaBoostClassifier()\n",
    "gradient = GradientBoostingClassifier()\n",
    "hist = HistGradientBoostingClassifier()\n",
    "xgb = XGBClassifier()\n",
    "mlp = MLPClassifier()\n",
    "\n",
    "clf1 = LogisticRegression(random_state=1)\n",
    "clf2 = RandomForestClassifier(n_estimators=50, random_state=1)\n",
    "clf3 = GaussianNB()\n",
    "eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)],voting='hard')\n",
    "\n",
    "# Create a StratifiedKFold instance with 10 splits, to be used in cross validation and (later on GridSearch)\n",
    "cv = StratifiedKFold(n_splits=10, shuffle=True, random_state=15)\n",
    "\n",
    "# Assess the performance of the different classifiers with cross validation\n",
    "scores = cross_val_score(xgb, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "# Fit the classifier\n",
    "xgb.fit(X_train, y_train)\n",
    "print(\"Accuracy xgb: %0.2f (+/- %0.2f)\" % (scores.mean(), scores.std() * 2))\n",
    "\n",
    "scores2 = cross_val_score(eclf, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "eclf.fit(X_train, y_train)\n",
    "print(\"Accuracy eclf: %0.2f (+/- %0.2f)\" % (scores2.mean(), scores2.std() * 2))\n",
    "\n",
    "scores3 = cross_val_score(hist, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "hist.fit(X_train, y_train)\n",
    "print(\"Accuracy hist: %0.2f (+/- %0.2f)\" % (scores3.mean(), scores3.std() * 2))\n",
    "\n",
    "scores4 = cross_val_score(gradient, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "gradient.fit(X_train, y_train)\n",
    "print(\"Accuracy gradient: %0.2f (+/- %0.2f)\" % (scores4.mean(), scores4.std() * 2))\n",
    "\n",
    "scores5 = cross_val_score(ada, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "ada.fit(X_train, y_train)\n",
    "print(\"Accuracy ada: %0.2f (+/- %0.2f)\" % (scores5.mean(), scores5.std() * 2))\n",
    "\n",
    "scores6 = cross_val_score(extra, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "extra.fit(X_train, y_train)\n",
    "print(\"Accuracy extra: %0.2f (+/- %0.2f)\" % (scores6.mean(), scores6.std() * 2))\n",
    "\n",
    "scores7 = cross_val_score(random, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "random.fit(X_train, y_train)\n",
    "print(\"Accuracy random: %0.2f (+/- %0.2f)\" % (scores7.mean(), scores7.std() * 2))\n",
    "\n",
    "scores8 = cross_val_score(bg, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "bg.fit(X_train, y_train)\n",
    "print(\"Accuracy bg: %0.2f (+/- %0.2f)\" % (scores8.mean(), scores8.std() * 2))\n",
    "\n",
    "scores9 = cross_val_score(dt, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "dt.fit(X_train, y_train)\n",
    "print(\"Accuracy dt: %0.2f (+/- %0.2f)\" % (scores9.mean(), scores9.std() * 2))\n",
    "\n",
    "scores10 = cross_val_score(gnb, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "gnb.fit(X_train, y_train)\n",
    "print(\"Accuracy gnb: %0.2f (+/- %0.2f)\" % (scores10.mean(), scores10.std() * 2))\n",
    "\n",
    "scores11 = cross_val_score(KNN, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "KNN.fit(X_train, y_train)\n",
    "print(\"Accuracy KNN: %0.2f (+/- %0.2f)\" % (scores11.mean(), scores11.std() * 2))\n",
    "\n",
    "scores12 = cross_val_score(BNB, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "BNB.fit(X_train, y_train)\n",
    "print(\"Accuracy BNB: %0.2f (+/- %0.2f)\" % (scores12.mean(), scores12.std() * 2))\n",
    "\n",
    "scores13 = cross_val_score(LR, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "LR.fit(X_train, y_train)\n",
    "print(\"Accuracy LR: %0.2f (+/- %0.2f)\" % (scores13.mean(), scores13.std() * 2))\n",
    "\n",
    "scores14 = cross_val_score(SGD, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "SGD.fit(X_train, y_train)\n",
    "print(\"Accuracy SGD: %0.2f (+/- %0.2f)\" % (scores14.mean(), scores14.std() * 2))\n",
    "\n",
    "scores15 = cross_val_score(SVC, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "SVC.fit(X_train, y_train)\n",
    "print(\"Accuracy SVC: %0.2f (+/- %0.2f)\" % (scores15.mean(), scores15.std() * 2))\n",
    "\n",
    "scores16 = cross_val_score(LSVC, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "LSVC.fit(X_train, y_train)\n",
    "print(\"Accuracy LSVC: %0.2f (+/- %0.2f)\" % (scores16.mean(), scores16.std() * 2))\n",
    "\n",
    "scores17 = cross_val_score(NSVC, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "NSVC.fit(X_train, y_train)\n",
    "print(\"Accuracy NSVC: %0.2f (+/- %0.2f)\" % (scores17.mean(), scores17.std() * 2))\n",
    "\n",
    "scores18 = cross_val_score(mlp, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "mlp.fit(X_train, y_train)\n",
    "print(\"Accuracy mlp: %0.2f (+/- %0.2f)\" % (scores18.mean(), scores18.std() * 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Compare train and test results**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Train_accuracy</th>\n",
       "      <th>Test_accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>GradientBoostingClassifier</th>\n",
       "      <td>0.901587</td>\n",
       "      <td>0.785185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AdaBoostClassifier</th>\n",
       "      <td>0.861905</td>\n",
       "      <td>0.785185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VotingClassifier</th>\n",
       "      <td>0.855556</td>\n",
       "      <td>0.781481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BNB</th>\n",
       "      <td>0.790476</td>\n",
       "      <td>0.781481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RandomForestClassifier</th>\n",
       "      <td>0.980952</td>\n",
       "      <td>0.781481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ExtraTreesClassifier</th>\n",
       "      <td>0.980952</td>\n",
       "      <td>0.766667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HistGradientBoostingClassifier</th>\n",
       "      <td>0.950794</td>\n",
       "      <td>0.766667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LR</th>\n",
       "      <td>0.812698</td>\n",
       "      <td>0.762963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DecisionTree</th>\n",
       "      <td>0.980952</td>\n",
       "      <td>0.744444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NSVC</th>\n",
       "      <td>0.771429</td>\n",
       "      <td>0.740741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GaussianNB</th>\n",
       "      <td>0.784127</td>\n",
       "      <td>0.740741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BaggingClassifier</th>\n",
       "      <td>0.960317</td>\n",
       "      <td>0.740741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MLPClassifier</th>\n",
       "      <td>0.763492</td>\n",
       "      <td>0.714815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KNN</th>\n",
       "      <td>0.980952</td>\n",
       "      <td>0.670370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSVC</th>\n",
       "      <td>0.698413</td>\n",
       "      <td>0.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SVC</th>\n",
       "      <td>0.703175</td>\n",
       "      <td>0.662963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SDG</th>\n",
       "      <td>0.614286</td>\n",
       "      <td>0.614815</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Train_accuracy  Test_accuracy\n",
       "GradientBoostingClassifier            0.901587       0.785185\n",
       "AdaBoostClassifier                    0.861905       0.785185\n",
       "VotingClassifier                      0.855556       0.781481\n",
       "BNB                                   0.790476       0.781481\n",
       "RandomForestClassifier                0.980952       0.781481\n",
       "ExtraTreesClassifier                  0.980952       0.766667\n",
       "HistGradientBoostingClassifier        0.950794       0.766667\n",
       "LR                                    0.812698       0.762963\n",
       "DecisionTree                          0.980952       0.744444\n",
       "NSVC                                  0.771429       0.740741\n",
       "GaussianNB                            0.784127       0.740741\n",
       "BaggingClassifier                     0.960317       0.740741\n",
       "MLPClassifier                         0.763492       0.714815\n",
       "KNN                                   0.980952       0.670370\n",
       "LSVC                                  0.698413       0.666667\n",
       "SVC                                   0.703175       0.662963\n",
       "SDG                                   0.614286       0.614815"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Save the performance of each classifier on the train and validation set into a dataframe\n",
    "raw_data = {'VotingClassifier': [accuracy_score(y_train, eclf.predict(X_train)),accuracy_score(y_val, eclf.predict(X_val))],\n",
    "            'HistGradientBoostingClassifier': [accuracy_score(y_train, hist.predict(X_train)),accuracy_score(y_val, hist.predict(X_val))],\n",
    "            'GradientBoostingClassifier': [accuracy_score(y_train, gradient.predict(X_train)), accuracy_score(y_val, gradient.predict(X_val))],\n",
    "            'AdaBoostClassifier': [accuracy_score(y_train, ada.predict(X_train)), accuracy_score(y_val, ada.predict(X_val))],\n",
    "            'ExtraTreesClassifier': [accuracy_score(y_train, extra.predict(X_train)),accuracy_score(y_val, extra.predict(X_val))],\n",
    "            'RandomForestClassifier': [accuracy_score(y_train, random.predict(X_train)), accuracy_score(y_val, random.predict(X_val))],\n",
    "            'BaggingClassifier': [accuracy_score(y_train, bg.predict(X_train)), accuracy_score(y_val, bg.predict(X_val))],\n",
    "            'DecisionTree': [accuracy_score(y_train, dt.predict(X_train)), accuracy_score(y_val, dt.predict(X_val))],\n",
    "            'GaussianNB': [accuracy_score(y_train, gnb.predict(X_train)), accuracy_score(y_val, gnb.predict(X_val))],\n",
    "            'KNN': [accuracy_score(y_train, KNN.predict(X_train)), accuracy_score(y_val, KNN.predict(X_val))],\n",
    "            'BNB': [ accuracy_score(y_train, BNB.predict(X_train)), accuracy_score(y_val, BNB.predict(X_val))],\n",
    "            'LR': [accuracy_score(y_train, LR.predict(X_train)), accuracy_score(y_val, LR.predict(X_val))],\n",
    "            'SDG': [accuracy_score(y_train, SGD.predict(X_train)), accuracy_score(y_val, SGD.predict(X_val))],\n",
    "            'SVC': [accuracy_score(y_train, SVC.predict(X_train)), accuracy_score(y_val, SVC.predict(X_val))],\n",
    "            'LSVC': [accuracy_score(y_train, LSVC.predict(X_train)), accuracy_score(y_val, LSVC.predict(X_val))],\n",
    "            'NSVC': [accuracy_score(y_train, NSVC.predict(X_train)), accuracy_score(y_val, NSVC.predict(X_val))],\n",
    "            'XGBClassifier': [accuracy_score(y_train, xgb.predict(X_train)), accuracy_score(y_val, xgb.predict(X_val))],\n",
    "            'MLPClassifier': [accuracy_score(y_train, mlp.predict(X_train)), accuracy_score(y_val, mlp.predict(X_val))]}\n",
    "\n",
    "raw = pd.DataFrame(list(raw_data.values()), index=raw_data.keys(),columns=['Train_accuracy','Test_accuracy'])\n",
    "\n",
    "# Sort the values by the accuracy on the validation set\n",
    "raw.sort_values(by=['Test_accuracy'], ascending = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "<a id=\"model_1\">\n",
    "    \n",
    "##  MLPClassifier  \n",
    "</a>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Although it did not seem to have a good score before, we came to the conclusion that it produced better results with our data.\n",
    "- Below we present our best models concerning MLPClassifier with different approaches conducted by the GridSearch results and different variable combinations (we tested the performance of MLPClassifier with the rfe_variables and with the entire dataset)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## BEST MODEL\n",
    "### With rfe_variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Define the model MLPClassifier**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = MLPClassifier()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Fit the data to the model and predict**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.7142857142857143, 0.662962962962963)"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit the model\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predict labels to validation set\n",
    "labels_val = model.predict(X_val)\n",
    "\n",
    "# Check scores\n",
    "model.score(X_train, y_train), model.score(X_val, y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.774074074074074"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scale X_train data set\n",
    "min_max_X_train = min_max.transform(X_train)\n",
    "\n",
    "# Scale X_val data set\n",
    "min_max_X_val = min_max.transform(X_val)\n",
    "\n",
    "# Creating an object that will contain a MLPClassifier model fitted to the scaled training data\n",
    "model_min_max = MLPClassifier().fit(min_max_X_train, y_train)\n",
    "\n",
    "# Calculate the mean accuracy of the classifier\n",
    "model_min_max.score(min_max_X_val, y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7814814814814814"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scale X_train data set\n",
    "min_max2_X_train = min_max2.transform(X_train)\n",
    "\n",
    "# Scale X_val data set\n",
    "min_max2_X_val = min_max2.transform(X_val)\n",
    "\n",
    "# Creating an object that will contain a MLPClassifier model fitted to the scaled training data\n",
    "model_min_max2 = MLPClassifier().fit(min_max2_X_train, y_train)\n",
    "\n",
    "# Calculate the mean accuracy of the classifier\n",
    "model_min_max2.score(min_max2_X_val, y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7851851851851852"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scale X_train data set\n",
    "scaler_X_train = scaler.transform(X_train)\n",
    "\n",
    "# Scale X_val data set\n",
    "scaler_X_val = scaler.transform(X_val)\n",
    "\n",
    "# Creating an object that will contain a MLPClassifier model fitted to the scaled training data\n",
    "model_scaler = MLPClassifier().fit(scaler_X_train, y_train)\n",
    "\n",
    "# Calculate the mean accuracy of the classifier\n",
    "model_scaler.score(scaler_X_val, y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7851851851851852"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scale X_train data set\n",
    "robust_X_train = robust.transform(X_train)\n",
    "\n",
    "# Scale X_val data set\n",
    "robust_X_val = robust.transform(X_val)\n",
    "\n",
    "# Creating an object that will contain a MLPClassifier model fitted to the scaled training data\n",
    "model_robust = MLPClassifier().fit(robust_X_train, y_train)\n",
    "\n",
    "# Calculate the mean accuracy of the classifier\n",
    "model_robust.score(robust_X_val, y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Hyperparameter Tuning Implementation**\n",
    "    - Since the robust standardization provided a better performance, we will use robust_X_train to fit our model with the best parameters from GridSearchCV:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=15, shuffle=True),\n",
       "             error_score=nan,\n",
       "             estimator=MLPClassifier(activation='relu', alpha=0.0001,\n",
       "                                     batch_size='auto', beta_1=0.9,\n",
       "                                     beta_2=0.999, early_stopping=False,\n",
       "                                     epsilon=1e-08, hidden_layer_sizes=(100,),\n",
       "                                     learning_rate='constant',\n",
       "                                     learning_rate_init=0.001, max_fun=15000,\n",
       "                                     max_iter=200, momentum=0.9,\n",
       "                                     n_iter_no_ch...\n",
       "             iid='deprecated', n_jobs=-1,\n",
       "             param_grid={'activation': ['relu', 'logistic', 'tanh', 'dentity’'],\n",
       "                         'hidden_layer_sizes': [(50, 50, 50), (50, 100, 50),\n",
       "                                                100, (14, 14, 16)],\n",
       "                         'learning_rate': ['constant', 'adaptive',\n",
       "                                           'invscaling’'],\n",
       "                         'learning_rate_init': [0.01, 0.001, 0.0001],\n",
       "                         'solver': ['sgd', 'adam', 'lbfgs’']},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring='accuracy', verbose=0)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define a dictionary named as grid and define some architectures that will be considered during modelling\n",
    "grid = {'hidden_layer_sizes': [(50, 50, 50), (50, 100, 50), (100), (14,14,16)],\n",
    "        'activation': ['relu', 'logistic','tanh', 'dentity’'],\n",
    "        'solver': ['sgd', 'adam', 'lbfgs’'],\n",
    "        'learning_rate_init': [0.01, 0.001, 0.0001],\n",
    "        'learning_rate': ['constant','adaptive', 'invscaling’']}\n",
    "\n",
    "# Grid Search Implementation\n",
    "clf = GridSearchCV(estimator = model, param_grid=grid, cv=cv, scoring= 'accuracy', n_jobs=-1)\n",
    "\n",
    "# Fit the model\n",
    "clf.fit(robust_X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Call the attribute best_params_ to check which is the best combination of parameters**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'activation': 'relu',\n",
       " 'hidden_layer_sizes': (50, 50, 50),\n",
       " 'learning_rate': 'constant',\n",
       " 'learning_rate_init': 0.0001,\n",
       " 'solver': 'adam'}"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Create a dataframe named clf_results with the different combination of parameters and the accuracy for each one**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>activation</th>\n",
       "      <th>hidden_layer_sizes</th>\n",
       "      <th>learning_rate</th>\n",
       "      <th>learning_rate_init</th>\n",
       "      <th>solver</th>\n",
       "      <th>Accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>relu</td>\n",
       "      <td>(50, 50, 50)</td>\n",
       "      <td>constant</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>adam</td>\n",
       "      <td>0.825397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229</th>\n",
       "      <td>tanh</td>\n",
       "      <td>(50, 50, 50)</td>\n",
       "      <td>adaptive</td>\n",
       "      <td>0.0010</td>\n",
       "      <td>adam</td>\n",
       "      <td>0.825397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>relu</td>\n",
       "      <td>100</td>\n",
       "      <td>constant</td>\n",
       "      <td>0.0100</td>\n",
       "      <td>adam</td>\n",
       "      <td>0.825397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>relu</td>\n",
       "      <td>(50, 100, 50)</td>\n",
       "      <td>adaptive</td>\n",
       "      <td>0.0100</td>\n",
       "      <td>sgd</td>\n",
       "      <td>0.823810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250</th>\n",
       "      <td>tanh</td>\n",
       "      <td>(50, 100, 50)</td>\n",
       "      <td>constant</td>\n",
       "      <td>0.0001</td>\n",
       "      <td>adam</td>\n",
       "      <td>0.823810</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    activation hidden_layer_sizes learning_rate  learning_rate_init solver  \\\n",
       "7         relu       (50, 50, 50)      constant              0.0001   adam   \n",
       "229       tanh       (50, 50, 50)      adaptive              0.0010   adam   \n",
       "55        relu                100      constant              0.0100   adam   \n",
       "36        relu      (50, 100, 50)      adaptive              0.0100    sgd   \n",
       "250       tanh      (50, 100, 50)      constant              0.0001   adam   \n",
       "\n",
       "     Accuracy  \n",
       "7    0.825397  \n",
       "229  0.825397  \n",
       "55   0.825397  \n",
       "36   0.823810  \n",
       "250  0.823810  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_results = pd.concat([pd.DataFrame(clf.cv_results_[\"params\"]), \n",
    "                         pd.DataFrame(clf.cv_results_[\"mean_test_score\"], \n",
    "                                      columns=[\"Accuracy\"])],axis=1)\n",
    "\n",
    "# Sort the values according to the accuracy\n",
    "clf_results.sort_values(by = [\"Accuracy\"], ascending = False).head(5) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Apply the best combination of parameters to our model** - it probably will not match the results above, since it returns different results every time, but these were the ones who produced better results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.8476190476190476, 0.8037037037037037)"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_model_mlp2 = MLPClassifier(hidden_layer_sizes = (50,50,50), \n",
    "                                activation = 'relu', \n",
    "                                learning_rate = 'adaptive',\n",
    "                                learning_rate_init = 0.01, \n",
    "                                solver = 'adam',  \n",
    "                                max_iter = 2000, \n",
    "                                early_stopping = True, \n",
    "                                warm_start = True).fit(robust_X_train, y_train)\n",
    "\n",
    "# Check the score for train and validation set of the best combination of parameters \n",
    "best_model_mlp2.score(robust_X_train, y_train), best_model_mlp2.score(robust_X_val, y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Predict on the test dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Transform the test dataset\n",
    "robust_test_set = robust.transform(test)\n",
    "\n",
    "# Get the labels from robust_test_set\n",
    "predictions_best_model_mlp2 = best_model_mlp2.predict(robust_test_set)\n",
    "predictions_best_model_mlp2 = predictions_best_model_mlp2.reshape(-1, 1)\n",
    "\n",
    "# Create a Dataframe with the columns 'Patient_ID' and 'Deceased'\n",
    "submission_best_model_mlp2 = pd.DataFrame(\n",
    "    {'Patient_ID': test.index, 'Deceased': predictions_best_model_mlp2.squeeze()},\n",
    "    columns = ['Patient_ID', 'Deceased'])\n",
    "\n",
    "# Create a csv file \n",
    "submission_best_model_mlp2.to_csv('Group2_model_best_model_mlp2_v2.0.csv', index = False, header = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**NOTE:** When submitted on Kaggle the score obtained was: 0.83333. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OTHER APPROACH\n",
    "### With rfe_variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Apply what we believe are the second best parameters**\n",
    "    - Despite the results from GridSearchCV, we tested the following parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.8523809523809524, 0.7962962962962963)"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_model_mlp2 = MLPClassifier(hidden_layer_sizes = (50,50,50), \n",
    "                               activation = 'relu', \n",
    "                               learning_rate = 'adaptive',\n",
    "                               learning_rate_init = 0.01, \n",
    "                               solver = 'adam',  max_iter = 1000, \n",
    "                                early_stopping = True, \n",
    "                                warm_start = True).fit(robust_X_train, y_train)\n",
    "\n",
    "# Check the score for train and validation set of the best combination of parameters \n",
    "best_model_mlp2.score(robust_X_train, y_train), best_model_mlp2.score(robust_X_val, y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Predict on the test dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the labels from robust_test_set\n",
    "predictions_best_model_mlp2 = best_model_mlp2.predict(robust_test_set)\n",
    "predictions_best_model_mlp2 = predictions_best_model_mlp2.reshape(-1, 1)\n",
    "\n",
    "# Create a Dataframe with the columns 'Patient_ID' and 'Deceased'\n",
    "submission_best_model_mlp2 = pd.DataFrame(\n",
    "    {'Patient_ID': test.index, 'Deceased': predictions_best_model_mlp2.squeeze()},\n",
    "    columns = ['Patient_ID', 'Deceased'])\n",
    "\n",
    "# Create a csv file \n",
    "submission_best_model_mlp2.to_csv('Group2_model_best_model_mlp2.csv', index = False, header = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**NOTE:** When submitted on Kaggle the score obtained was: 0.82500"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "<a id=\"model_2\">\n",
    "    \n",
    "##  ExtraTreesClassifier  \n",
    "</a>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# OTHER APPROACH\n",
    "### With rfe_variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Hyperparameter Tuning Implementation**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some architectures that will be considered during modelling\n",
    "max_features = [None,'auto', 'sqrt', 'log2']\n",
    "criterion = ['entropy', 'gini']\n",
    "max_depth = range(2, 15)\n",
    "class_weight = [None, 'balanced', 'balanced_subsample']\n",
    "\n",
    "# Define a dictionary named as grid and define some architectures that will be considered during modelling\n",
    "grid = dict(max_features=max_features,criterion=criterion, max_depth=max_depth, class_weight=class_weight)\n",
    "\n",
    "# Grid Search Implementation\n",
    "grid_search = GridSearchCV(estimator=ExtraTreesClassifier(random_state=15), param_grid=grid, cv=cv, scoring= 'accuracy', n_jobs=-1)\n",
    "\n",
    "# Fit the model\n",
    "grid_result = grid_search.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.847619 using {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 13, 'max_features': None}\n",
      "0.787302 (0.042710) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 2, 'max_features': None}\n",
      "0.792063 (0.034375) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'auto'}\n",
      "0.792063 (0.034375) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'sqrt'}\n",
      "0.792063 (0.034375) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'log2'}\n",
      "0.801587 (0.040933) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 3, 'max_features': None}\n",
      "0.784127 (0.039010) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'auto'}\n",
      "0.784127 (0.039010) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'sqrt'}\n",
      "0.784127 (0.039010) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'log2'}\n",
      "0.819048 (0.042116) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 4, 'max_features': None}\n",
      "0.787302 (0.042710) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'auto'}\n",
      "0.787302 (0.042710) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'sqrt'}\n",
      "0.787302 (0.042710) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'log2'}\n",
      "0.817460 (0.040312) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 5, 'max_features': None}\n",
      "0.811111 (0.045148) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'auto'}\n",
      "0.811111 (0.045148) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'sqrt'}\n",
      "0.811111 (0.045148) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'log2'}\n",
      "0.814286 (0.039555) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 6, 'max_features': None}\n",
      "0.815873 (0.037022) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'auto'}\n",
      "0.815873 (0.037022) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'sqrt'}\n",
      "0.815873 (0.037022) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'log2'}\n",
      "0.822222 (0.041270) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 7, 'max_features': None}\n",
      "0.814286 (0.034081) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'auto'}\n",
      "0.814286 (0.034081) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'sqrt'}\n",
      "0.814286 (0.034081) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'log2'}\n",
      "0.820635 (0.040187) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 8, 'max_features': None}\n",
      "0.814286 (0.030159) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'auto'}\n",
      "0.814286 (0.030159) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'sqrt'}\n",
      "0.814286 (0.030159) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'log2'}\n",
      "0.833333 (0.034957) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 9, 'max_features': None}\n",
      "0.819048 (0.031105) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'auto'}\n",
      "0.819048 (0.031105) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'sqrt'}\n",
      "0.819048 (0.031105) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'log2'}\n",
      "0.841270 (0.037562) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 10, 'max_features': None}\n",
      "0.822222 (0.033144) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'auto'}\n",
      "0.822222 (0.033144) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'sqrt'}\n",
      "0.822222 (0.033144) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'log2'}\n",
      "0.841270 (0.033296) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 11, 'max_features': None}\n",
      "0.822222 (0.040655) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'auto'}\n",
      "0.822222 (0.040655) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'sqrt'}\n",
      "0.822222 (0.040655) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'log2'}\n",
      "0.846032 (0.033333) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 12, 'max_features': None}\n",
      "0.830159 (0.034812) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'auto'}\n",
      "0.830159 (0.034812) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'sqrt'}\n",
      "0.830159 (0.034812) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'log2'}\n",
      "0.844444 (0.029096) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 13, 'max_features': None}\n",
      "0.838095 (0.038751) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'auto'}\n",
      "0.838095 (0.038751) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'sqrt'}\n",
      "0.838095 (0.038751) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'log2'}\n",
      "0.841270 (0.029268) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 14, 'max_features': None}\n",
      "0.831746 (0.028571) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'auto'}\n",
      "0.831746 (0.028571) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'sqrt'}\n",
      "0.831746 (0.028571) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'log2'}\n",
      "0.788889 (0.040187) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 2, 'max_features': None}\n",
      "0.793651 (0.033296) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 2, 'max_features': 'auto'}\n",
      "0.793651 (0.033296) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 2, 'max_features': 'sqrt'}\n",
      "0.793651 (0.033296) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 2, 'max_features': 'log2'}\n",
      "0.814286 (0.040809) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 3, 'max_features': None}\n",
      "0.785714 (0.037730) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 3, 'max_features': 'auto'}\n",
      "0.785714 (0.037730) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 3, 'max_features': 'sqrt'}\n",
      "0.785714 (0.037730) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 3, 'max_features': 'log2'}\n",
      "0.815873 (0.039010) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 4, 'max_features': None}\n",
      "0.782540 (0.040187) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 4, 'max_features': 'auto'}\n",
      "0.782540 (0.040187) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 4, 'max_features': 'sqrt'}\n",
      "0.782540 (0.040187) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 4, 'max_features': 'log2'}\n",
      "0.814286 (0.039555) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 5, 'max_features': None}\n",
      "0.806349 (0.044783) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 5, 'max_features': 'auto'}\n",
      "0.806349 (0.044783) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 5, 'max_features': 'sqrt'}\n",
      "0.806349 (0.044783) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 5, 'max_features': 'log2'}\n",
      "0.822222 (0.046980) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 6, 'max_features': None}\n",
      "0.819048 (0.040902) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 6, 'max_features': 'auto'}\n",
      "0.819048 (0.040902) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 6, 'max_features': 'sqrt'}\n",
      "0.819048 (0.040902) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 6, 'max_features': 'log2'}\n",
      "0.823810 (0.041056) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 7, 'max_features': None}\n",
      "0.815873 (0.037022) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 7, 'max_features': 'auto'}\n",
      "0.815873 (0.037022) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 7, 'max_features': 'sqrt'}\n",
      "0.815873 (0.037022) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 7, 'max_features': 'log2'}\n",
      "0.822222 (0.040655) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 8, 'max_features': None}\n",
      "0.812698 (0.033144) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 8, 'max_features': 'auto'}\n",
      "0.812698 (0.033144) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 8, 'max_features': 'sqrt'}\n",
      "0.812698 (0.033144) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 8, 'max_features': 'log2'}\n",
      "0.833333 (0.038392) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 9, 'max_features': None}\n",
      "0.820635 (0.030159) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 9, 'max_features': 'auto'}\n",
      "0.820635 (0.030159) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 9, 'max_features': 'sqrt'}\n",
      "0.820635 (0.030159) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 9, 'max_features': 'log2'}\n",
      "0.838095 (0.040655) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 10, 'max_features': None}\n",
      "0.822222 (0.029096) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 10, 'max_features': 'auto'}\n",
      "0.822222 (0.029096) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 10, 'max_features': 'sqrt'}\n",
      "0.822222 (0.029096) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 10, 'max_features': 'log2'}\n",
      "0.841270 (0.036196) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 11, 'max_features': None}\n",
      "0.825397 (0.039523) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 11, 'max_features': 'auto'}\n",
      "0.825397 (0.039523) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 11, 'max_features': 'sqrt'}\n",
      "0.825397 (0.039523) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 11, 'max_features': 'log2'}\n",
      "0.842857 (0.033634) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 12, 'max_features': None}\n",
      "0.833333 (0.041544) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 12, 'max_features': 'auto'}\n",
      "0.833333 (0.041544) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 12, 'max_features': 'sqrt'}\n",
      "0.833333 (0.041544) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 12, 'max_features': 'log2'}\n",
      "0.846032 (0.030159) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 13, 'max_features': None}\n",
      "0.836508 (0.032569) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 13, 'max_features': 'auto'}\n",
      "0.836508 (0.032569) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 13, 'max_features': 'sqrt'}\n",
      "0.836508 (0.032569) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 13, 'max_features': 'log2'}\n",
      "0.839683 (0.029653) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 14, 'max_features': None}\n",
      "0.831746 (0.030284) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 14, 'max_features': 'auto'}\n",
      "0.831746 (0.030284) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 14, 'max_features': 'sqrt'}\n",
      "0.831746 (0.030284) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 14, 'max_features': 'log2'}\n",
      "0.774603 (0.043644) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 2, 'max_features': None}\n",
      "0.779365 (0.040437) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'auto'}\n",
      "0.779365 (0.040437) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'sqrt'}\n",
      "0.779365 (0.040437) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'log2'}\n",
      "0.790476 (0.040030) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 3, 'max_features': None}\n",
      "0.790476 (0.041270) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'auto'}\n",
      "0.790476 (0.041270) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'sqrt'}\n",
      "0.790476 (0.041270) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'log2'}\n",
      "0.819048 (0.034921) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 4, 'max_features': None}\n",
      "0.788889 (0.038260) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'auto'}\n",
      "0.788889 (0.038260) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'sqrt'}\n",
      "0.788889 (0.038260) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'log2'}\n",
      "0.819048 (0.030284) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 5, 'max_features': None}\n",
      "0.804762 (0.033333) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'auto'}\n",
      "0.804762 (0.033333) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'sqrt'}\n",
      "0.804762 (0.033333) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'log2'}\n",
      "0.826984 (0.037863) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 6, 'max_features': None}\n",
      "0.815873 (0.030284) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'auto'}\n",
      "0.815873 (0.030284) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'sqrt'}\n",
      "0.815873 (0.030284) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'log2'}\n",
      "0.823810 (0.036508) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 7, 'max_features': None}\n",
      "0.825397 (0.036886) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'auto'}\n",
      "0.825397 (0.036886) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'sqrt'}\n",
      "0.825397 (0.036886) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'log2'}\n",
      "0.830159 (0.034081) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 8, 'max_features': None}\n",
      "0.817460 (0.032723) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'auto'}\n",
      "0.817460 (0.032723) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'sqrt'}\n",
      "0.817460 (0.032723) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'log2'}\n",
      "0.831746 (0.034921) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 9, 'max_features': None}\n",
      "0.822222 (0.036749) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'auto'}\n",
      "0.822222 (0.036749) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'sqrt'}\n",
      "0.822222 (0.036749) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'log2'}\n",
      "0.834921 (0.032685) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 10, 'max_features': None}\n",
      "0.820635 (0.040809) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'auto'}\n",
      "0.820635 (0.040809) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'sqrt'}\n",
      "0.820635 (0.040809) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'log2'}\n",
      "0.839683 (0.035811) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 11, 'max_features': None}\n",
      "0.822222 (0.040030) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'auto'}\n",
      "0.822222 (0.040030) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'sqrt'}\n",
      "0.822222 (0.040030) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'log2'}\n",
      "0.839683 (0.034375) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 12, 'max_features': None}\n",
      "0.830159 (0.034812) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'auto'}\n",
      "0.830159 (0.034812) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'sqrt'}\n",
      "0.830159 (0.034812) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'log2'}\n",
      "0.847619 (0.035635) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 13, 'max_features': None}\n",
      "0.828571 (0.040655) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'auto'}\n",
      "0.828571 (0.040655) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'sqrt'}\n",
      "0.828571 (0.040655) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'log2'}\n",
      "0.841270 (0.028395) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 14, 'max_features': None}\n",
      "0.834921 (0.031105) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'auto'}\n",
      "0.834921 (0.031105) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'sqrt'}\n",
      "0.834921 (0.031105) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'log2'}\n",
      "0.779365 (0.044586) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 2, 'max_features': None}\n",
      "0.779365 (0.040437) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 2, 'max_features': 'auto'}\n",
      "0.779365 (0.040437) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 2, 'max_features': 'sqrt'}\n",
      "0.779365 (0.040437) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 2, 'max_features': 'log2'}\n",
      "0.792063 (0.044017) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 3, 'max_features': None}\n",
      "0.788889 (0.045481) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 3, 'max_features': 'auto'}\n",
      "0.788889 (0.045481) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 3, 'max_features': 'sqrt'}\n",
      "0.788889 (0.045481) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 3, 'max_features': 'log2'}\n",
      "0.823810 (0.036508) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 4, 'max_features': None}\n",
      "0.792063 (0.035811) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'auto'}\n",
      "0.792063 (0.035811) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'sqrt'}\n",
      "0.792063 (0.035811) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'log2'}\n",
      "0.819048 (0.037022) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 5, 'max_features': None}\n",
      "0.807937 (0.031306) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 5, 'max_features': 'auto'}\n",
      "0.807937 (0.031306) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 5, 'max_features': 'sqrt'}\n",
      "0.807937 (0.031306) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 5, 'max_features': 'log2'}\n",
      "0.823810 (0.039809) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 6, 'max_features': None}\n",
      "0.815873 (0.031105) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 6, 'max_features': 'auto'}\n",
      "0.815873 (0.031105) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 6, 'max_features': 'sqrt'}\n",
      "0.815873 (0.031105) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 6, 'max_features': 'log2'}\n",
      "0.820635 (0.031786) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 7, 'max_features': None}\n",
      "0.822222 (0.033895) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 7, 'max_features': 'auto'}\n",
      "0.822222 (0.033895) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 7, 'max_features': 'sqrt'}\n",
      "0.822222 (0.033895) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 7, 'max_features': 'log2'}\n",
      "0.823810 (0.031306) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 8, 'max_features': None}\n",
      "0.822222 (0.035351) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 8, 'max_features': 'auto'}\n",
      "0.822222 (0.035351) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 8, 'max_features': 'sqrt'}\n",
      "0.822222 (0.035351) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 8, 'max_features': 'log2'}\n",
      "0.833333 (0.034228) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 9, 'max_features': None}\n",
      "0.820635 (0.038913) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 9, 'max_features': 'auto'}\n",
      "0.820635 (0.038913) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 9, 'max_features': 'sqrt'}\n",
      "0.820635 (0.038913) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 9, 'max_features': 'log2'}\n",
      "0.836508 (0.035529) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 10, 'max_features': None}\n",
      "0.819048 (0.032685) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 10, 'max_features': 'auto'}\n",
      "0.819048 (0.032685) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 10, 'max_features': 'sqrt'}\n",
      "0.819048 (0.032685) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 10, 'max_features': 'log2'}\n",
      "0.839683 (0.033634) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 11, 'max_features': None}\n",
      "0.820635 (0.035529) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 11, 'max_features': 'auto'}\n",
      "0.820635 (0.035529) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 11, 'max_features': 'sqrt'}\n",
      "0.820635 (0.035529) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 11, 'max_features': 'log2'}\n",
      "0.847619 (0.028571) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 12, 'max_features': None}\n",
      "0.834921 (0.033447) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'auto'}\n",
      "0.834921 (0.033447) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'sqrt'}\n",
      "0.834921 (0.033447) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'log2'}\n",
      "0.842857 (0.034375) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 13, 'max_features': None}\n",
      "0.839683 (0.033634) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 13, 'max_features': 'auto'}\n",
      "0.839683 (0.033634) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 13, 'max_features': 'sqrt'}\n",
      "0.839683 (0.033634) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 13, 'max_features': 'log2'}\n",
      "0.838095 (0.036057) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 14, 'max_features': None}\n",
      "0.830159 (0.028439) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 14, 'max_features': 'auto'}\n",
      "0.830159 (0.028439) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 14, 'max_features': 'sqrt'}\n",
      "0.830159 (0.028439) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 14, 'max_features': 'log2'}\n",
      "0.774603 (0.043644) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 2, 'max_features': None}\n",
      "0.779365 (0.040437) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'auto'}\n",
      "0.779365 (0.040437) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'sqrt'}\n",
      "0.779365 (0.040437) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'log2'}\n",
      "0.790476 (0.040030) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 3, 'max_features': None}\n",
      "0.790476 (0.041270) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'auto'}\n",
      "0.790476 (0.041270) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'sqrt'}\n",
      "0.790476 (0.041270) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'log2'}\n",
      "0.819048 (0.034921) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 4, 'max_features': None}\n",
      "0.788889 (0.038260) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'auto'}\n",
      "0.788889 (0.038260) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'sqrt'}\n",
      "0.788889 (0.038260) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'log2'}\n",
      "0.819048 (0.030284) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 5, 'max_features': None}\n",
      "0.804762 (0.033333) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'auto'}\n",
      "0.804762 (0.033333) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'sqrt'}\n",
      "0.804762 (0.033333) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'log2'}\n",
      "0.826984 (0.037863) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 6, 'max_features': None}\n",
      "0.815873 (0.030284) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'auto'}\n",
      "0.815873 (0.030284) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'sqrt'}\n",
      "0.815873 (0.030284) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'log2'}\n",
      "0.823810 (0.036508) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 7, 'max_features': None}\n",
      "0.825397 (0.036886) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'auto'}\n",
      "0.825397 (0.036886) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'sqrt'}\n",
      "0.825397 (0.036886) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'log2'}\n",
      "0.830159 (0.034081) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 8, 'max_features': None}\n",
      "0.817460 (0.032723) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'auto'}\n",
      "0.817460 (0.032723) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'sqrt'}\n",
      "0.817460 (0.032723) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'log2'}\n",
      "0.831746 (0.034921) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 9, 'max_features': None}\n",
      "0.822222 (0.036749) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'auto'}\n",
      "0.822222 (0.036749) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'sqrt'}\n",
      "0.822222 (0.036749) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'log2'}\n",
      "0.834921 (0.032685) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 10, 'max_features': None}\n",
      "0.820635 (0.040809) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'auto'}\n",
      "0.820635 (0.040809) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'sqrt'}\n",
      "0.820635 (0.040809) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'log2'}\n",
      "0.839683 (0.035811) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 11, 'max_features': None}\n",
      "0.822222 (0.040030) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'auto'}\n",
      "0.822222 (0.040030) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'sqrt'}\n",
      "0.822222 (0.040030) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'log2'}\n",
      "0.839683 (0.034375) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 12, 'max_features': None}\n",
      "0.830159 (0.034812) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'auto'}\n",
      "0.830159 (0.034812) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'sqrt'}\n",
      "0.830159 (0.034812) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'log2'}\n",
      "0.847619 (0.035635) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 13, 'max_features': None}\n",
      "0.828571 (0.040655) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'auto'}\n",
      "0.828571 (0.040655) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'sqrt'}\n",
      "0.828571 (0.040655) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'log2'}\n",
      "0.841270 (0.028395) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 14, 'max_features': None}\n",
      "0.834921 (0.031105) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'auto'}\n",
      "0.834921 (0.031105) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'sqrt'}\n",
      "0.834921 (0.031105) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'log2'}\n",
      "0.779365 (0.044586) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 2, 'max_features': None}\n",
      "0.779365 (0.040437) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 2, 'max_features': 'auto'}\n",
      "0.779365 (0.040437) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 2, 'max_features': 'sqrt'}\n",
      "0.779365 (0.040437) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 2, 'max_features': 'log2'}\n",
      "0.792063 (0.044017) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 3, 'max_features': None}\n",
      "0.788889 (0.045481) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 3, 'max_features': 'auto'}\n",
      "0.788889 (0.045481) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 3, 'max_features': 'sqrt'}\n",
      "0.788889 (0.045481) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 3, 'max_features': 'log2'}\n",
      "0.823810 (0.036508) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 4, 'max_features': None}\n",
      "0.792063 (0.035811) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'auto'}\n",
      "0.792063 (0.035811) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'sqrt'}\n",
      "0.792063 (0.035811) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'log2'}\n",
      "0.819048 (0.037022) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 5, 'max_features': None}\n",
      "0.807937 (0.031306) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 5, 'max_features': 'auto'}\n",
      "0.807937 (0.031306) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 5, 'max_features': 'sqrt'}\n",
      "0.807937 (0.031306) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 5, 'max_features': 'log2'}\n",
      "0.823810 (0.039809) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 6, 'max_features': None}\n",
      "0.815873 (0.031105) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 6, 'max_features': 'auto'}\n",
      "0.815873 (0.031105) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 6, 'max_features': 'sqrt'}\n",
      "0.815873 (0.031105) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 6, 'max_features': 'log2'}\n",
      "0.820635 (0.031786) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 7, 'max_features': None}\n",
      "0.822222 (0.033895) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 7, 'max_features': 'auto'}\n",
      "0.822222 (0.033895) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 7, 'max_features': 'sqrt'}\n",
      "0.822222 (0.033895) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 7, 'max_features': 'log2'}\n",
      "0.823810 (0.031306) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 8, 'max_features': None}\n",
      "0.822222 (0.035351) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 8, 'max_features': 'auto'}\n",
      "0.822222 (0.035351) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 8, 'max_features': 'sqrt'}\n",
      "0.822222 (0.035351) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 8, 'max_features': 'log2'}\n",
      "0.833333 (0.034228) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 9, 'max_features': None}\n",
      "0.820635 (0.038913) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 9, 'max_features': 'auto'}\n",
      "0.820635 (0.038913) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 9, 'max_features': 'sqrt'}\n",
      "0.820635 (0.038913) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 9, 'max_features': 'log2'}\n",
      "0.836508 (0.035529) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 10, 'max_features': None}\n",
      "0.819048 (0.032685) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 10, 'max_features': 'auto'}\n",
      "0.819048 (0.032685) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 10, 'max_features': 'sqrt'}\n",
      "0.819048 (0.032685) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 10, 'max_features': 'log2'}\n",
      "0.839683 (0.033634) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 11, 'max_features': None}\n",
      "0.820635 (0.035529) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 11, 'max_features': 'auto'}\n",
      "0.820635 (0.035529) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 11, 'max_features': 'sqrt'}\n",
      "0.820635 (0.035529) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 11, 'max_features': 'log2'}\n",
      "0.847619 (0.028571) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 12, 'max_features': None}\n",
      "0.834921 (0.033447) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'auto'}\n",
      "0.834921 (0.033447) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'sqrt'}\n",
      "0.834921 (0.033447) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'log2'}\n",
      "0.842857 (0.034375) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 13, 'max_features': None}\n",
      "0.839683 (0.033634) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 13, 'max_features': 'auto'}\n",
      "0.839683 (0.033634) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 13, 'max_features': 'sqrt'}\n",
      "0.839683 (0.033634) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 13, 'max_features': 'log2'}\n",
      "0.838095 (0.036057) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 14, 'max_features': None}\n",
      "0.830159 (0.028439) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 14, 'max_features': 'auto'}\n",
      "0.830159 (0.028439) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 14, 'max_features': 'sqrt'}\n",
      "0.830159 (0.028439) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 14, 'max_features': 'log2'}\n"
     ]
    }
   ],
   "source": [
    "# Get the best score and the best parameters\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "means = grid_result.cv_results_['mean_test_score']\n",
    "stds = grid_result.cv_results_['std_test_score']\n",
    "params = grid_result.cv_results_['params']\n",
    "for mean, stdev, param in zip(means, stds, params):\n",
    "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Apply the best combination of parameters to our model** - it probably will not match the results above, since it returns different results every time, but these were the ones who produced better results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy hist: 0.80 (+/- 0.00)\n"
     ]
    }
   ],
   "source": [
    "# Define the classifier with the best parameters combination\n",
    "clf_ET3 = ExtraTreesClassifier(max_depth = 5, criterion = 'entropy', bootstrap = True)\n",
    "\n",
    "# Assess the performance of the clf_ET3 with cross validation\n",
    "scores_ = cross_val_score(clf_ET3, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "print(\"Accuracy hist: %0.2f (+/- %0.2f)\" % (scores_.mean(), scores_.std() * 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check score in train and validation sets**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.8380952380952381, 0.8)"
      ]
     },
     "execution_count": 263,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_ET3 = ExtraTreesClassifier(max_depth = 5, criterion = 'entropy', bootstrap = True).fit(X_train, y_train) \n",
    "clf_ET3.score(X_train, y_train), clf_ET3.score(X_val, y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Predict on the test dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the labels from test set\n",
    "predictions_clf_ET3 = clf_ET3.predict(test)\n",
    "predictions_clf_ET3 = predictions_clf_ET3.reshape(-1, 1)\n",
    "\n",
    "# Create a Dataframe with the columns 'Patient_ID' and 'Deceased'\n",
    "submission_clf_ET3 = pd.DataFrame(\n",
    "    {'Patient_ID': test.index, 'Deceased': predictions_clf_ET3.squeeze()},\n",
    "    columns = ['Patient_ID', 'Deceased'])\n",
    "\n",
    "# Create a csv file \n",
    "submission_clf_ET3.to_csv('Group2_clf_ET3_v4.0.csv', index = False, header = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**NOTE:** When submitted on Kaggle the score obtained was: 0.83333"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "<a id=\"model_3\">\n",
    "    \n",
    "##  Bagging Classifier with ExtraTreesClassifier \n",
    "</a>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Below we will try to improve the performance of the previous model (clf_ET3) by adding an ensemble method, more precisely the Bagging Classifier."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# OTHER APPROACH\n",
    "### With rfe_variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Hyperparameter Tuning Implementation**\n",
    "    - For computational ease, we decided to decrease the number of parameters in each GridSearch, starting by searching the best parameters configuration regarding max_features, bootstrap, bootstrap_features and warm_start. The second GridSearch aims to find the best n_estimators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some architectures that will be considered during modelling\n",
    "max_features = range(1, X_train.shape[1]+1)\n",
    "bootstrap = [True, False]\n",
    "bootstrap_features = [True, False]\n",
    "warm_start = [True, False]\n",
    "\n",
    "# Define a dictionary named as grid and define some architectures that will be considered during modelling\n",
    "grid = dict( max_features=max_features, bootstrap=bootstrap,bootstrap_features=bootstrap_features,\n",
    "        warm_start=warm_start)\n",
    "\n",
    "# Grid Search Implementation\n",
    "grid_search = GridSearchCV(estimator=BaggingClassifier(base_estimator = clf_ET3, random_state=15),param_grid=grid,\n",
    "                           cv=cv, scoring= 'accuracy', n_jobs=-1)\n",
    "\n",
    "# Fit our model\n",
    "grid_result = grid_search.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.811111 using {'bootstrap': True, 'bootstrap_features': True, 'max_features': 4, 'warm_start': True} \n"
     ]
    }
   ],
   "source": [
    "# Get the best score and the best parameters\n",
    "print(\"Best: %f using %s \"%(grid_result.best_score_,grid_result.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initiate the second GridSearch in order to find the best n_estimators, based on the previous parameters\n",
    "n_estimators= range(50, 200, 10)\n",
    "\n",
    "# Define a dictionary named as grid\n",
    "grid = dict(n_estimators=n_estimators)\n",
    "\n",
    "# Grid Search Implementation\n",
    "grid_search_extratrees = GridSearchCV(estimator=BaggingClassifier(base_estimator = clf_ET3, bootstrap = True,\n",
    "                                                       bootstrap_features = True, max_features=4,\n",
    "                                                       warm_start=True, random_state=15),param_grid=grid, cv=cv, \n",
    "                                      scoring= 'accuracy', n_jobs=-1)\n",
    "\n",
    "# Fit our model\n",
    "grid_result_extratrees = grid_search_extratrees.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.801587 using {'n_estimators': 50} \n"
     ]
    }
   ],
   "source": [
    "# Get the best score and the best parameters\n",
    "print(\"Best: %f using %s \"%(grid_result_extratrees.best_score_, grid_result_extratrees.best_params_))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Apply the best combination of parameters to our model** - it probably will not match the results above, since it returns different results every time, but these were the ones who produced better results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy bagging_extratrees: 0.80 (+/- 0.00)\n"
     ]
    }
   ],
   "source": [
    "# Define the classifier with the best parameters combination\n",
    "bagging_extratrees = BaggingClassifier(base_estimator = clf_ET3, \n",
    "                                       bootstrap = True, bootstrap_features = True, max_features=4,\n",
    "                                       warm_start=True, n_estimators = 50)\n",
    "\n",
    "# Assess the performance of the bagging_extratrees with cross validation\n",
    "scores_ = cross_val_score(bagging_extratrees, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "print(\"Accuracy bagging_extratrees: %0.2f (+/- %0.2f)\" % (scores_.mean(), scores_.std() * 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.8365079365079365, 0.774074074074074)"
      ]
     },
     "execution_count": 315,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bagging_extratrees.fit(X_train, y_train)\n",
    "\n",
    "bagging_extratrees.score(X_train, y_train), bagging_extratrees.score(X_val, y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Predict on the test dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the labels from test set\n",
    "predictions_bagging_extratrees = bagging_extratrees.predict(test)\n",
    "predictions_bagging_extratrees = predictions_bagging_extratrees.reshape(-1, 1)\n",
    "\n",
    "# Create a Dataframe with the columns 'Patient_ID' and 'Deceased'\n",
    "submission_bagging_extratrees= pd.DataFrame(\n",
    "    {'Patient_ID': test.index, 'Deceased': predictions_bagging_extratrees.squeeze()},\n",
    "    columns = ['Patient_ID', 'Deceased'])\n",
    "\n",
    "# Create a csv file \n",
    "submission_bagging_extratrees.to_csv('bagging_extratrees1.csv', index = False, header = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**NOTE:** When submitted on Kaggle the score obtained was: 0.80833\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# OTHER APPROACH\n",
    "### With all_variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Define data and test, this time with all variables**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 492,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data = train\n",
    "test = test_copy.drop(columns=['Family_Case_ID'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Using the method __train_test_split__, split the __data__ into __X_train__ and __X_val__, the __target__ into __y_train__ and __y_val__, and define the following arguments:**\n",
    "- __test_size__ = 0.3\n",
    "- __random_state__ = 15\n",
    "- __shuffle__ = True\n",
    "- __stratify__ = target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 495,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_val, y_train, y_val = train_test_split(data, \n",
    "                                                    target, \n",
    "                                                    test_size=0.3, \n",
    "                                                    random_state=15, \n",
    "                                                    shuffle=True, \n",
    "                                                    stratify=target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check again the best parameters for the ExtraTreesClassifier since we are using different data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 496,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some architectures that will be considered during modelling\n",
    "max_features = [None,'auto', 'sqrt', 'log2']\n",
    "criterion = ['entropy', 'gini']\n",
    "max_depth = range(2, 15)\n",
    "class_weight = [None, 'balanced', 'balanced_subsample']\n",
    "\n",
    "# Define a dictionary named as grid and define some architectures that will be considered during modelling\n",
    "grid = dict(max_features=max_features,criterion=criterion, max_depth=max_depth, class_weight=class_weight)\n",
    "\n",
    "# Grid Search Implementation\n",
    "grid_search = GridSearchCV(estimator=ExtraTreesClassifier(random_state=15), param_grid=grid, cv=cv, scoring= 'accuracy', n_jobs=-1)\n",
    "\n",
    "# Fit our model\n",
    "grid_result = grid_search.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 497,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.836508 using {'class_weight': None, 'criterion': 'entropy', 'max_depth': 11, 'max_features': None}\n",
      "0.787302 (0.042710) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 2, 'max_features': None}\n",
      "0.796825 (0.035351) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'auto'}\n",
      "0.796825 (0.035351) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'sqrt'}\n",
      "0.796825 (0.035351) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'log2'}\n",
      "0.806349 (0.038751) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 3, 'max_features': None}\n",
      "0.807937 (0.047857) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'auto'}\n",
      "0.807937 (0.047857) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'sqrt'}\n",
      "0.807937 (0.047857) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'log2'}\n",
      "0.815873 (0.032685) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 4, 'max_features': None}\n",
      "0.801587 (0.041544) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'auto'}\n",
      "0.801587 (0.041544) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'sqrt'}\n",
      "0.801587 (0.041544) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'log2'}\n",
      "0.814286 (0.033333) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 5, 'max_features': None}\n",
      "0.811111 (0.044017) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'auto'}\n",
      "0.811111 (0.044017) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'sqrt'}\n",
      "0.811111 (0.044017) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'log2'}\n",
      "0.826984 (0.030491) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 6, 'max_features': None}\n",
      "0.804762 (0.036231) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'auto'}\n",
      "0.804762 (0.036231) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'sqrt'}\n",
      "0.804762 (0.036231) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'log2'}\n",
      "0.826984 (0.036508) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 7, 'max_features': None}\n",
      "0.809524 (0.036886) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'auto'}\n",
      "0.809524 (0.036886) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'sqrt'}\n",
      "0.809524 (0.036886) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'log2'}\n",
      "0.828571 (0.034631) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 8, 'max_features': None}\n",
      "0.815873 (0.014548) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'auto'}\n",
      "0.815873 (0.014548) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'sqrt'}\n",
      "0.815873 (0.014548) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'log2'}\n",
      "0.823810 (0.026034) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 9, 'max_features': None}\n",
      "0.804762 (0.026608) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'auto'}\n",
      "0.804762 (0.026608) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'sqrt'}\n",
      "0.804762 (0.026608) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'log2'}\n",
      "0.828571 (0.027309) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 10, 'max_features': None}\n",
      "0.809524 (0.020078) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'auto'}\n",
      "0.809524 (0.020078) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'sqrt'}\n",
      "0.809524 (0.020078) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'log2'}\n",
      "0.836508 (0.027539) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 11, 'max_features': None}\n",
      "0.815873 (0.021531) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'auto'}\n",
      "0.815873 (0.021531) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'sqrt'}\n",
      "0.815873 (0.021531) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'log2'}\n",
      "0.834921 (0.023757) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 12, 'max_features': None}\n",
      "0.815873 (0.026750) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'auto'}\n",
      "0.815873 (0.026750) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'sqrt'}\n",
      "0.815873 (0.026750) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'log2'}\n",
      "0.830159 (0.026608) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 13, 'max_features': None}\n",
      "0.822222 (0.018511) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'auto'}\n",
      "0.822222 (0.018511) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'sqrt'}\n",
      "0.822222 (0.018511) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'log2'}\n",
      "0.828571 (0.024385) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 14, 'max_features': None}\n",
      "0.820635 (0.021355) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'auto'}\n",
      "0.820635 (0.021355) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'sqrt'}\n",
      "0.820635 (0.021355) with: {'class_weight': None, 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'log2'}\n",
      "0.787302 (0.042710) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 2, 'max_features': None}\n",
      "0.796825 (0.035351) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 2, 'max_features': 'auto'}\n",
      "0.796825 (0.035351) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 2, 'max_features': 'sqrt'}\n",
      "0.796825 (0.035351) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 2, 'max_features': 'log2'}\n",
      "0.807937 (0.037863) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 3, 'max_features': None}\n",
      "0.806349 (0.048040) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 3, 'max_features': 'auto'}\n",
      "0.806349 (0.048040) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 3, 'max_features': 'sqrt'}\n",
      "0.806349 (0.048040) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 3, 'max_features': 'log2'}\n",
      "0.811111 (0.035811) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 4, 'max_features': None}\n",
      "0.804762 (0.040187) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 4, 'max_features': 'auto'}\n",
      "0.804762 (0.040187) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 4, 'max_features': 'sqrt'}\n",
      "0.804762 (0.040187) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 4, 'max_features': 'log2'}\n",
      "0.817460 (0.027721) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 5, 'max_features': None}\n",
      "0.811111 (0.041665) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 5, 'max_features': 'auto'}\n",
      "0.811111 (0.041665) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 5, 'max_features': 'sqrt'}\n",
      "0.811111 (0.041665) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 5, 'max_features': 'log2'}\n",
      "0.825397 (0.031746) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 6, 'max_features': None}\n",
      "0.800000 (0.039651) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 6, 'max_features': 'auto'}\n",
      "0.800000 (0.039651) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 6, 'max_features': 'sqrt'}\n",
      "0.800000 (0.039651) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 6, 'max_features': 'log2'}\n",
      "0.823810 (0.033634) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 7, 'max_features': None}\n",
      "0.822222 (0.038095) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 7, 'max_features': 'auto'}\n",
      "0.822222 (0.038095) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 7, 'max_features': 'sqrt'}\n",
      "0.822222 (0.038095) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 7, 'max_features': 'log2'}\n",
      "0.823810 (0.036508) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 8, 'max_features': None}\n",
      "0.812698 (0.024385) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 8, 'max_features': 'auto'}\n",
      "0.812698 (0.024385) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 8, 'max_features': 'sqrt'}\n",
      "0.812698 (0.024385) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 8, 'max_features': 'log2'}\n",
      "0.819048 (0.028571) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 9, 'max_features': None}\n",
      "0.807937 (0.026034) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 9, 'max_features': 'auto'}\n",
      "0.807937 (0.026034) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 9, 'max_features': 'sqrt'}\n",
      "0.807937 (0.026034) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 9, 'max_features': 'log2'}\n",
      "0.825397 (0.028395) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 10, 'max_features': None}\n",
      "0.809524 (0.027493) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 10, 'max_features': 'auto'}\n",
      "0.809524 (0.027493) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 10, 'max_features': 'sqrt'}\n",
      "0.809524 (0.027493) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 10, 'max_features': 'log2'}\n",
      "0.822222 (0.029096) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 11, 'max_features': None}\n",
      "0.811111 (0.026034) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 11, 'max_features': 'auto'}\n",
      "0.811111 (0.026034) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 11, 'max_features': 'sqrt'}\n",
      "0.811111 (0.026034) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 11, 'max_features': 'log2'}\n",
      "0.825397 (0.026561) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 12, 'max_features': None}\n",
      "0.817460 (0.022727) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 12, 'max_features': 'auto'}\n",
      "0.817460 (0.022727) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 12, 'max_features': 'sqrt'}\n",
      "0.817460 (0.022727) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 12, 'max_features': 'log2'}\n",
      "0.823810 (0.026034) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 13, 'max_features': None}\n",
      "0.820635 (0.018848) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 13, 'max_features': 'auto'}\n",
      "0.820635 (0.018848) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 13, 'max_features': 'sqrt'}\n",
      "0.820635 (0.018848) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 13, 'max_features': 'log2'}\n",
      "0.820635 (0.018848) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 14, 'max_features': None}\n",
      "0.831746 (0.022671) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 14, 'max_features': 'auto'}\n",
      "0.831746 (0.022671) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 14, 'max_features': 'sqrt'}\n",
      "0.831746 (0.022671) with: {'class_weight': None, 'criterion': 'gini', 'max_depth': 14, 'max_features': 'log2'}\n",
      "0.774603 (0.043644) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 2, 'max_features': None}\n",
      "0.776190 (0.046250) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'auto'}\n",
      "0.776190 (0.046250) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'sqrt'}\n",
      "0.776190 (0.046250) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'log2'}\n",
      "0.795238 (0.041665) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 3, 'max_features': None}\n",
      "0.784127 (0.040281) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'auto'}\n",
      "0.784127 (0.040281) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'sqrt'}\n",
      "0.784127 (0.040281) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'log2'}\n",
      "0.812698 (0.032375) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 4, 'max_features': None}\n",
      "0.796825 (0.043062) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'auto'}\n",
      "0.796825 (0.043062) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'sqrt'}\n",
      "0.796825 (0.043062) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'log2'}\n",
      "0.820635 (0.030159) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 5, 'max_features': None}\n",
      "0.809524 (0.041996) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'auto'}\n",
      "0.809524 (0.041996) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'sqrt'}\n",
      "0.809524 (0.041996) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'log2'}\n",
      "0.828571 (0.036057) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 6, 'max_features': None}\n",
      "0.812698 (0.030779) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'auto'}\n",
      "0.812698 (0.030779) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'sqrt'}\n",
      "0.812698 (0.030779) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'log2'}\n",
      "0.823810 (0.034375) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 7, 'max_features': None}\n",
      "0.819048 (0.035635) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'auto'}\n",
      "0.819048 (0.035635) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'sqrt'}\n",
      "0.819048 (0.035635) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'log2'}\n",
      "0.831746 (0.031904) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 8, 'max_features': None}\n",
      "0.807937 (0.032101) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'auto'}\n",
      "0.807937 (0.032101) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'sqrt'}\n",
      "0.807937 (0.032101) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'log2'}\n",
      "0.825397 (0.034776) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 9, 'max_features': None}\n",
      "0.812698 (0.030779) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'auto'}\n",
      "0.812698 (0.030779) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'sqrt'}\n",
      "0.812698 (0.030779) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'log2'}\n",
      "0.836508 (0.030983) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 10, 'max_features': None}\n",
      "0.807937 (0.037192) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'auto'}\n",
      "0.807937 (0.037192) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'sqrt'}\n",
      "0.807937 (0.037192) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'log2'}\n",
      "0.831746 (0.027676) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 11, 'max_features': None}\n",
      "0.815873 (0.030284) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'auto'}\n",
      "0.815873 (0.030284) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'sqrt'}\n",
      "0.815873 (0.030284) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'log2'}\n",
      "0.833333 (0.025839) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 12, 'max_features': None}\n",
      "0.819048 (0.029440) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'auto'}\n",
      "0.819048 (0.029440) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'sqrt'}\n",
      "0.819048 (0.029440) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'log2'}\n",
      "0.828571 (0.026370) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 13, 'max_features': None}\n",
      "0.825397 (0.028395) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'auto'}\n",
      "0.825397 (0.028395) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'sqrt'}\n",
      "0.825397 (0.028395) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'log2'}\n",
      "0.828571 (0.029096) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 14, 'max_features': None}\n",
      "0.812698 (0.022222) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'auto'}\n",
      "0.812698 (0.022222) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'sqrt'}\n",
      "0.812698 (0.022222) with: {'class_weight': 'balanced', 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'log2'}\n",
      "0.774603 (0.043644) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 2, 'max_features': None}\n",
      "0.779365 (0.047327) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 2, 'max_features': 'auto'}\n",
      "0.779365 (0.047327) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 2, 'max_features': 'sqrt'}\n",
      "0.779365 (0.047327) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 2, 'max_features': 'log2'}\n",
      "0.798413 (0.045481) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 3, 'max_features': None}\n",
      "0.779365 (0.039171) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 3, 'max_features': 'auto'}\n",
      "0.779365 (0.039171) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 3, 'max_features': 'sqrt'}\n",
      "0.779365 (0.039171) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 3, 'max_features': 'log2'}\n",
      "0.815873 (0.036335) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 4, 'max_features': None}\n",
      "0.800000 (0.045008) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'auto'}\n",
      "0.800000 (0.045008) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'sqrt'}\n",
      "0.800000 (0.045008) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'log2'}\n",
      "0.817460 (0.026797) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 5, 'max_features': None}\n",
      "0.811111 (0.040437) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 5, 'max_features': 'auto'}\n",
      "0.811111 (0.040437) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 5, 'max_features': 'sqrt'}\n",
      "0.811111 (0.040437) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 5, 'max_features': 'log2'}\n",
      "0.825397 (0.036886) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 6, 'max_features': None}\n",
      "0.817460 (0.031944) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 6, 'max_features': 'auto'}\n",
      "0.817460 (0.031944) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 6, 'max_features': 'sqrt'}\n",
      "0.817460 (0.031944) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 6, 'max_features': 'log2'}\n",
      "0.826984 (0.036508) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 7, 'max_features': None}\n",
      "0.820635 (0.034812) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 7, 'max_features': 'auto'}\n",
      "0.820635 (0.034812) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 7, 'max_features': 'sqrt'}\n",
      "0.820635 (0.034812) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 7, 'max_features': 'log2'}\n",
      "0.822222 (0.033144) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 8, 'max_features': None}\n",
      "0.806349 (0.031587) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 8, 'max_features': 'auto'}\n",
      "0.806349 (0.031587) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 8, 'max_features': 'sqrt'}\n",
      "0.806349 (0.031587) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 8, 'max_features': 'log2'}\n",
      "0.822222 (0.032375) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 9, 'max_features': None}\n",
      "0.811111 (0.026984) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 9, 'max_features': 'auto'}\n",
      "0.811111 (0.026984) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 9, 'max_features': 'sqrt'}\n",
      "0.811111 (0.026984) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 9, 'max_features': 'log2'}\n",
      "0.828571 (0.029949) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 10, 'max_features': None}\n",
      "0.811111 (0.030491) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 10, 'max_features': 'auto'}\n",
      "0.811111 (0.030491) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 10, 'max_features': 'sqrt'}\n",
      "0.811111 (0.030491) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 10, 'max_features': 'log2'}\n",
      "0.828571 (0.023328) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 11, 'max_features': None}\n",
      "0.811111 (0.026984) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 11, 'max_features': 'auto'}\n",
      "0.811111 (0.026984) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 11, 'max_features': 'sqrt'}\n",
      "0.811111 (0.026984) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 11, 'max_features': 'log2'}\n",
      "0.825397 (0.023543) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 12, 'max_features': None}\n",
      "0.814286 (0.026608) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'auto'}\n",
      "0.814286 (0.026608) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'sqrt'}\n",
      "0.814286 (0.026608) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'log2'}\n",
      "0.830159 (0.027539) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 13, 'max_features': None}\n",
      "0.819048 (0.028571) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 13, 'max_features': 'auto'}\n",
      "0.819048 (0.028571) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 13, 'max_features': 'sqrt'}\n",
      "0.819048 (0.028571) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 13, 'max_features': 'log2'}\n",
      "0.819048 (0.022671) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 14, 'max_features': None}\n",
      "0.815873 (0.019048) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 14, 'max_features': 'auto'}\n",
      "0.815873 (0.019048) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 14, 'max_features': 'sqrt'}\n",
      "0.815873 (0.019048) with: {'class_weight': 'balanced', 'criterion': 'gini', 'max_depth': 14, 'max_features': 'log2'}\n",
      "0.774603 (0.043644) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 2, 'max_features': None}\n",
      "0.776190 (0.046250) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'auto'}\n",
      "0.776190 (0.046250) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'sqrt'}\n",
      "0.776190 (0.046250) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 2, 'max_features': 'log2'}\n",
      "0.795238 (0.041665) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 3, 'max_features': None}\n",
      "0.784127 (0.040281) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'auto'}\n",
      "0.784127 (0.040281) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'sqrt'}\n",
      "0.784127 (0.040281) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 3, 'max_features': 'log2'}\n",
      "0.812698 (0.032375) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 4, 'max_features': None}\n",
      "0.796825 (0.043062) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'auto'}\n",
      "0.796825 (0.043062) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'sqrt'}\n",
      "0.796825 (0.043062) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 4, 'max_features': 'log2'}\n",
      "0.820635 (0.030159) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 5, 'max_features': None}\n",
      "0.809524 (0.041996) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'auto'}\n",
      "0.809524 (0.041996) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'sqrt'}\n",
      "0.809524 (0.041996) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 5, 'max_features': 'log2'}\n",
      "0.828571 (0.036057) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 6, 'max_features': None}\n",
      "0.812698 (0.030779) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'auto'}\n",
      "0.812698 (0.030779) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'sqrt'}\n",
      "0.812698 (0.030779) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 6, 'max_features': 'log2'}\n",
      "0.823810 (0.034375) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 7, 'max_features': None}\n",
      "0.819048 (0.035635) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'auto'}\n",
      "0.819048 (0.035635) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'sqrt'}\n",
      "0.819048 (0.035635) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 7, 'max_features': 'log2'}\n",
      "0.831746 (0.031904) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 8, 'max_features': None}\n",
      "0.807937 (0.032101) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'auto'}\n",
      "0.807937 (0.032101) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'sqrt'}\n",
      "0.807937 (0.032101) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 8, 'max_features': 'log2'}\n",
      "0.825397 (0.034776) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 9, 'max_features': None}\n",
      "0.812698 (0.030779) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'auto'}\n",
      "0.812698 (0.030779) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'sqrt'}\n",
      "0.812698 (0.030779) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 9, 'max_features': 'log2'}\n",
      "0.836508 (0.030983) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 10, 'max_features': None}\n",
      "0.807937 (0.037192) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'auto'}\n",
      "0.807937 (0.037192) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'sqrt'}\n",
      "0.807937 (0.037192) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 10, 'max_features': 'log2'}\n",
      "0.831746 (0.027676) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 11, 'max_features': None}\n",
      "0.815873 (0.030284) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'auto'}\n",
      "0.815873 (0.030284) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'sqrt'}\n",
      "0.815873 (0.030284) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 11, 'max_features': 'log2'}\n",
      "0.833333 (0.025839) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 12, 'max_features': None}\n",
      "0.819048 (0.029440) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'auto'}\n",
      "0.819048 (0.029440) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'sqrt'}\n",
      "0.819048 (0.029440) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 12, 'max_features': 'log2'}\n",
      "0.828571 (0.026370) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 13, 'max_features': None}\n",
      "0.825397 (0.028395) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'auto'}\n",
      "0.825397 (0.028395) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'sqrt'}\n",
      "0.825397 (0.028395) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 13, 'max_features': 'log2'}\n",
      "0.828571 (0.029096) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 14, 'max_features': None}\n",
      "0.812698 (0.022222) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'auto'}\n",
      "0.812698 (0.022222) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'sqrt'}\n",
      "0.812698 (0.022222) with: {'class_weight': 'balanced_subsample', 'criterion': 'entropy', 'max_depth': 14, 'max_features': 'log2'}\n",
      "0.774603 (0.043644) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 2, 'max_features': None}\n",
      "0.779365 (0.047327) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 2, 'max_features': 'auto'}\n",
      "0.779365 (0.047327) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 2, 'max_features': 'sqrt'}\n",
      "0.779365 (0.047327) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 2, 'max_features': 'log2'}\n",
      "0.798413 (0.045481) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 3, 'max_features': None}\n",
      "0.779365 (0.039171) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 3, 'max_features': 'auto'}\n",
      "0.779365 (0.039171) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 3, 'max_features': 'sqrt'}\n",
      "0.779365 (0.039171) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 3, 'max_features': 'log2'}\n",
      "0.815873 (0.036335) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 4, 'max_features': None}\n",
      "0.800000 (0.045008) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'auto'}\n",
      "0.800000 (0.045008) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'sqrt'}\n",
      "0.800000 (0.045008) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 4, 'max_features': 'log2'}\n",
      "0.817460 (0.026797) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 5, 'max_features': None}\n",
      "0.811111 (0.040437) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 5, 'max_features': 'auto'}\n",
      "0.811111 (0.040437) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 5, 'max_features': 'sqrt'}\n",
      "0.811111 (0.040437) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 5, 'max_features': 'log2'}\n",
      "0.825397 (0.036886) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 6, 'max_features': None}\n",
      "0.817460 (0.031944) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 6, 'max_features': 'auto'}\n",
      "0.817460 (0.031944) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 6, 'max_features': 'sqrt'}\n",
      "0.817460 (0.031944) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 6, 'max_features': 'log2'}\n",
      "0.826984 (0.036508) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 7, 'max_features': None}\n",
      "0.820635 (0.034812) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 7, 'max_features': 'auto'}\n",
      "0.820635 (0.034812) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 7, 'max_features': 'sqrt'}\n",
      "0.820635 (0.034812) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 7, 'max_features': 'log2'}\n",
      "0.822222 (0.033144) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 8, 'max_features': None}\n",
      "0.806349 (0.031587) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 8, 'max_features': 'auto'}\n",
      "0.806349 (0.031587) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 8, 'max_features': 'sqrt'}\n",
      "0.806349 (0.031587) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 8, 'max_features': 'log2'}\n",
      "0.822222 (0.032375) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 9, 'max_features': None}\n",
      "0.811111 (0.026984) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 9, 'max_features': 'auto'}\n",
      "0.811111 (0.026984) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 9, 'max_features': 'sqrt'}\n",
      "0.811111 (0.026984) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 9, 'max_features': 'log2'}\n",
      "0.828571 (0.029949) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 10, 'max_features': None}\n",
      "0.811111 (0.030491) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 10, 'max_features': 'auto'}\n",
      "0.811111 (0.030491) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 10, 'max_features': 'sqrt'}\n",
      "0.811111 (0.030491) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 10, 'max_features': 'log2'}\n",
      "0.828571 (0.023328) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 11, 'max_features': None}\n",
      "0.811111 (0.026984) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 11, 'max_features': 'auto'}\n",
      "0.811111 (0.026984) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 11, 'max_features': 'sqrt'}\n",
      "0.811111 (0.026984) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 11, 'max_features': 'log2'}\n",
      "0.825397 (0.023543) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 12, 'max_features': None}\n",
      "0.814286 (0.026608) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'auto'}\n",
      "0.814286 (0.026608) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'sqrt'}\n",
      "0.814286 (0.026608) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 12, 'max_features': 'log2'}\n",
      "0.830159 (0.027539) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 13, 'max_features': None}\n",
      "0.819048 (0.028571) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 13, 'max_features': 'auto'}\n",
      "0.819048 (0.028571) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 13, 'max_features': 'sqrt'}\n",
      "0.819048 (0.028571) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 13, 'max_features': 'log2'}\n",
      "0.819048 (0.022671) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 14, 'max_features': None}\n",
      "0.815873 (0.019048) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 14, 'max_features': 'auto'}\n",
      "0.815873 (0.019048) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 14, 'max_features': 'sqrt'}\n",
      "0.815873 (0.019048) with: {'class_weight': 'balanced_subsample', 'criterion': 'gini', 'max_depth': 14, 'max_features': 'log2'}\n"
     ]
    }
   ],
   "source": [
    "# Get the best score and the best parameters\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "means = grid_result.cv_results_['mean_test_score']\n",
    "stds = grid_result.cv_results_['std_test_score']\n",
    "params = grid_result.cv_results_['params']\n",
    "for mean, stdev, param in zip(means, stds, params):\n",
    "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Apply the best combination of parameters to our model** - it probably will not match the results above, since it returns different results every time, but these were the ones who produced better results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 507,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy hist: 0.80 (+/- 0.00)\n"
     ]
    }
   ],
   "source": [
    "# Define the classifier with the best parameters combination\n",
    "clf_ET4 = ExtraTreesClassifier(max_depth = 3, criterion = 'entropy', bootstrap = True)\n",
    "\n",
    "# Assess the performance of the clf_ET4 with cross validation\n",
    "scores_ = cross_val_score(clf_ET4, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "print(\"Accuracy hist: %0.2f (+/- %0.2f)\" % (scores_.mean(), scores_.std() * 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Check score in train and validation sets**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.8333333333333334, 0.7962962962962963)"
      ]
     },
     "execution_count": 519,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_ET4 = ExtraTreesClassifier(max_depth = 4, criterion = 'entropy', bootstrap = True).fit(X_train, y_train) \n",
    "clf_ET4.score(X_train, y_train), clf_ET4.score(X_val, y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Hyperparameter Tuning Implementation for the Bagging Classifier**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some architectures that will be considered during modelling\n",
    "max_features = range(1, X_train.shape[1]+1)\n",
    "bootstrap = [True, False]\n",
    "bootstrap_features = [True, False]\n",
    "warm_start = [True, False]\n",
    "\n",
    "# Define a dictionary named as grid and define some architectures that will be considered during modelling\n",
    "grid = dict(max_features=max_features, bootstrap=bootstrap,bootstrap_features=bootstrap_features,\n",
    "        warm_start=warm_start)\n",
    "\n",
    "# Grid Search Implementation\n",
    "grid_search = GridSearchCV(estimator=BaggingClassifier(base_estimator = clf_ET4, random_state=15),\n",
    "                           param_grid=grid, cv=cv, scoring= 'accuracy', n_jobs=-1)\n",
    "\n",
    "# Fit our model\n",
    "grid_result = grid_search.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.819048 using {'bootstrap': True, 'bootstrap_features': True, 'max_features': 6, 'warm_start': True} \n"
     ]
    }
   ],
   "source": [
    "# Get the best score and the best parameters\n",
    "print(\"Best: %f using %s \"%(grid_result.best_score_,grid_result.best_params_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 522,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initiate the second GridSearch in order to find the best n_estimators, based on the previous parameters\n",
    "n_estimators= range(50, 200, 10)\n",
    "\n",
    "# Define a dictionary named as grid\n",
    "grid = dict(n_estimators=n_estimators)\n",
    "\n",
    "# Grid Search Implementation\n",
    "grid_search_extratrees = GridSearchCV(estimator=BaggingClassifier(base_estimator = clf_ET4, bootstrap = True,\n",
    "                                                       bootstrap_features = True, max_features=6,\n",
    "                                                       warm_start=True, random_state=15),param_grid=grid, cv=cv, scoring= 'accuracy', n_jobs=-1)\n",
    "# Fit our model\n",
    "grid_result_extratrees = grid_search_extratrees.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 523,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.809524 using {'n_estimators': 150} \n"
     ]
    }
   ],
   "source": [
    "# Get the best score and the best parameters\n",
    "print(\"Best: %f using %s \"%(grid_result_extratrees.best_score_, grid_result_extratrees.best_params_))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Apply the best combination of parameters to our model** - it probably will not match the results above, since it returns different results every time, but these were the ones who produced better results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 524,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy bagging_extratrees: 0.81 (+/- 0.00)\n"
     ]
    }
   ],
   "source": [
    "# Define the classifier with the best parameters combination\n",
    "bagging_extratrees= BaggingClassifier(base_estimator = clf_ET4, bootstrap = True,\n",
    "                                                       bootstrap_features = True, max_features=6,\n",
    "                                                       warm_start=True, n_estimators = 150)\n",
    "\n",
    "# Assess the performance of the bagging_extratrees with cross validation\n",
    "scores_ = cross_val_score(bagging_extratrees, X_train, y_train, cv=cv, scoring='accuracy', n_jobs=-1).mean()\n",
    "print(\"Accuracy bagging_extratrees: %0.2f (+/- %0.2f)\" % (scores_.mean(), scores_.std() * 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 527,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.8412698412698413, 0.774074074074074)"
      ]
     },
     "execution_count": 527,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bagging_extratrees.fit(X_train, y_train)\n",
    "\n",
    "bagging_extratrees.score(X_train, y_train), bagging_extratrees.score(X_val, y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**- Predict on the test dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 528,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the labels from test set\n",
    "predictions_bagging_extratrees = bagging_extratrees.predict(test)\n",
    "predictions_bagging_extratrees = predictions_bagging_extratrees.reshape(-1, 1)\n",
    "\n",
    "# Create a Dataframe with the columns 'Patient_ID' and 'Deceased'\n",
    "submission_bagging_extratrees = pd.DataFrame(\n",
    "    {'Patient_ID': test.index, 'Deceased': predictions_bagging_extratrees.squeeze()},\n",
    "    columns = ['Patient_ID', 'Deceased'])\n",
    "\n",
    "# Create a csv file\n",
    "submission_bagging_extratrees.to_csv('Group2_bagging_extratrees_v3.0.csv', index = False, header = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**NOTE:** When submitted on Kaggle the score obtained was: 0.83333"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
